/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export type ActionType = ActionTypeExtendedRef | ActionTypeOriginal;

export const ActionType = 'ActionType';

export function isActionType(item: unknown): item is ActionType {
    return reflection.isInstance(item, ActionType);
}

export type ActiveElement = ActiveEvent | ActiveFlow | ActiveTask | UseCase;

export const ActiveElement = 'ActiveElement';

export function isActiveElement(item: unknown): item is ActiveElement {
    return reflection.isInstance(item, ActiveElement);
}

export type ActiveEventType = ActiveEventTypeExtendedRef | ActiveEventTypeOriginal;

export const ActiveEventType = 'ActiveEventType';

export function isActiveEventType(item: unknown): item is ActiveEventType {
    return reflection.isInstance(item, ActiveEventType);
}

export type ActiveFlowType = ActiveFlowTypeExtendedRef | ActiveFlowTypeOriginal;

export const ActiveFlowType = 'ActiveFlowType';

export function isActiveFlowType(item: unknown): item is ActiveFlowType {
    return reflection.isInstance(item, ActiveFlowType);
}

export type ActiveStructureElement = ContextDimension;

export const ActiveStructureElement = 'ActiveStructureElement';

export function isActiveStructureElement(item: unknown): item is ActiveStructureElement {
    return reflection.isInstance(item, ActiveStructureElement);
}

export type ActiveTaskType = ActiveTaskTypeExtendedRef | ActiveTaskTypeOriginal;

export const ActiveTaskType = 'ActiveTaskType';

export function isActiveTaskType(item: unknown): item is ActiveTaskType {
    return reflection.isInstance(item, ActiveTaskType);
}

export type ActorType = ActorTypeExtendedRef | ActorTypeOriginal;

export const ActorType = 'ActorType';

export function isActorType(item: unknown): item is ActorType {
    return reflection.isInstance(item, ActorType);
}

export type BehaviorElement = ActiveElement;

export const BehaviorElement = 'BehaviorElement';

export function isBehaviorElement(item: unknown): item is BehaviorElement {
    return reflection.isInstance(item, BehaviorElement);
}

export type ContextDimension = ContextDimensionActor | ContextDimensionDevice | ContextDimensionSensor;

export const ContextDimension = 'ContextDimension';

export function isContextDimension(item: unknown): item is ContextDimension {
    return reflection.isInstance(item, ContextDimension);
}

export type ContextDimensionDeviceType = ContextDimensionDeviceTypeExtendedRef | ContextDimensionDeviceTypeOriginal;

export const ContextDimensionDeviceType = 'ContextDimensionDeviceType';

export function isContextDimensionDeviceType(item: unknown): item is ContextDimensionDeviceType {
    return reflection.isInstance(item, ContextDimensionDeviceType);
}

export type ContextDimensionSensorType = ContextDimensionSensorTypeExtendedRef | ContextDimensionSensorTypeOriginal;

export const ContextDimensionSensorType = 'ContextDimensionSensorType';

export function isContextDimensionSensorType(item: unknown): item is ContextDimensionSensorType {
    return reflection.isInstance(item, ContextDimensionSensorType);
}

export type ContextElement = ContextDimension | ContextVariable;

export const ContextElement = 'ContextElement';

export function isContextElement(item: unknown): item is ContextElement {
    return reflection.isInstance(item, ContextElement);
}

export type DataEntityClusterType = DataEntityClusterTypeExtendedRef | DataEntityClusterTypeOriginal;

export const DataEntityClusterType = 'DataEntityClusterType';

export function isDataEntityClusterType(item: unknown): item is DataEntityClusterType {
    return reflection.isInstance(item, DataEntityClusterType);
}

export type DataEntityGeneric = DataEntity | DataEntityCluster;

export const DataEntityGeneric = 'DataEntityGeneric';

export function isDataEntityGeneric(item: unknown): item is DataEntityGeneric {
    return reflection.isInstance(item, DataEntityGeneric);
}

export type DataEntitySubType = DataEntitySubTypeExtendedRef | DataEntitySubTypeOriginal;

export const DataEntitySubType = 'DataEntitySubType';

export function isDataEntitySubType(item: unknown): item is DataEntitySubType {
    return reflection.isInstance(item, DataEntitySubType);
}

export type DataEntityType = DataEntityTypeExtendedRef | DataEntityTypeOriginal;

export const DataEntityType = 'DataEntityType';

export function isDataEntityType(item: unknown): item is DataEntityType {
    return reflection.isInstance(item, DataEntityType);
}

export type DetailsFormulaOp = 'count' | 'sum';

export const DetailsFormulaOp = 'DetailsFormulaOp';

export function isDetailsFormulaOp(item: unknown): item is DetailsFormulaOp {
    return reflection.isInstance(item, DetailsFormulaOp);
}

export type DetailsFormulaOp_COUNT = 'count';

export type DetailsFormulaOp_SUM = 'sum';

export type DoubleOrInt = number | string;

export type Expression = ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | Equals | FunctionReference | LiteralExpression | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | VariableReference;

export const Expression = 'Expression';

export function isExpression(item: unknown): item is Expression {
    return reflection.isInstance(item, Expression);
}

export type FlowElement = UIAction | UIComponentPart | UIElement | UIEvent | UIPortDefinition;

export const FlowElement = 'FlowElement';

export function isFlowElement(item: unknown): item is FlowElement {
    return reflection.isInstance(item, FlowElement);
}

export type ForeignKeyOnDeleteType = ForeignKeyOnDeleteTypeExtendedRef | ForeignKeyOnDeleteTypeOriginal;

export const ForeignKeyOnDeleteType = 'ForeignKeyOnDeleteType';

export function isForeignKeyOnDeleteType(item: unknown): item is ForeignKeyOnDeleteType {
    return reflection.isInstance(item, ForeignKeyOnDeleteType);
}

export type Formula = ArithmeticFormula | DetailsFormula;

export const Formula = 'Formula';

export function isFormula(item: unknown): item is Formula {
    return reflection.isInstance(item, Formula);
}

export type IncludeElementGeneric = IncludeAll | IncludeElement;

export const IncludeElementGeneric = 'IncludeElementGeneric';

export function isIncludeElementGeneric(item: unknown): item is IncludeElementGeneric {
    return reflection.isInstance(item, IncludeElementGeneric);
}

export type LiteralExpression = BooleanLiteral | FunctionReference | IntegerLiteral | NullLiteral | StringLiteral | VariableReference;

export const LiteralExpression = 'LiteralExpression';

export function isLiteralExpression(item: unknown): item is LiteralExpression {
    return reflection.isInstance(item, LiteralExpression);
}

export type MetricType = MetricTypeExtendedRef | MetricTypeOriginal;

export const MetricType = 'MetricType';

export function isMetricType(item: unknown): item is MetricType {
    return reflection.isInstance(item, MetricType);
}

export type NetworkConnectivityType = NetworkConnectivityTypeExtendedRef | NetworkConnectivityTypeOriginal;

export const NetworkConnectivityType = 'NetworkConnectivityType';

export function isNetworkConnectivityType(item: unknown): item is NetworkConnectivityType {
    return reflection.isInstance(item, NetworkConnectivityType);
}

export type OtherElement = Context | Stereotype | TypeExtended;

export const OtherElement = 'OtherElement';

export function isOtherElement(item: unknown): item is OtherElement {
    return reflection.isInstance(item, OtherElement);
}

export type PackageAbstract = PackageSystem;

export const PackageAbstract = 'PackageAbstract';

export function isPackageAbstract(item: unknown): item is PackageAbstract {
    return reflection.isInstance(item, PackageAbstract);
}

export type PassiveStructureElement = Data | DataEntityGeneric | DataEnumeration;

export const PassiveStructureElement = 'PassiveStructureElement';

export function isPassiveStructureElement(item: unknown): item is PassiveStructureElement {
    return reflection.isInstance(item, PassiveStructureElement);
}

export type Percentage = string;

export type QualifiedName = string;

export type QualifiedNameWithWildcard = string;

export type ScreenSizeCategoryType = ScreenSizeCategoryTypeExtendedRef | ScreenSizeCategoryTypeOriginal;

export const ScreenSizeCategoryType = 'ScreenSizeCategoryType';

export function isScreenSizeCategoryType(item: unknown): item is ScreenSizeCategoryType {
    return reflection.isInstance(item, ScreenSizeCategoryType);
}

export type SensorStatusType = SensorStatusTypeExtendedRef | SensorStatusTypeOriginal;

export const SensorStatusType = 'SensorStatusType';

export function isSensorStatusType(item: unknown): item is SensorStatusType {
    return reflection.isInstance(item, SensorStatusType);
}

export type StereotypeType = StereotypeTypeExtendedRef | StereotypeTypeOriginal;

export const StereotypeType = 'StereotypeType';

export function isStereotypeType(item: unknown): item is StereotypeType {
    return reflection.isInstance(item, StereotypeType);
}

export type StructureElement = ActiveStructureElement | PassiveStructureElement;

export const StructureElement = 'StructureElement';

export function isStructureElement(item: unknown): item is StructureElement {
    return reflection.isInstance(item, StructureElement);
}

export type SystemConcept = SystemElement;

export const SystemConcept = 'SystemConcept';

export function isSystemConcept(item: unknown): item is SystemConcept {
    return reflection.isInstance(item, SystemConcept);
}

export type SystemElement = BehaviorElement | IncludeElementGeneric | OtherElement | StructureElement | UIModelElement;

export const SystemElement = 'SystemElement';

export function isSystemElement(item: unknown): item is SystemElement {
    return reflection.isInstance(item, SystemElement);
}

export type SystemSubType = SystemSubTypeExtendedRef | SystemSubTypeOriginal;

export const SystemSubType = 'SystemSubType';

export function isSystemSubType(item: unknown): item is SystemSubType {
    return reflection.isInstance(item, SystemSubType);
}

export type SystemType = SystemTypeExtendedRef | SystemTypeOriginal;

export const SystemType = 'SystemType';

export function isSystemType(item: unknown): item is SystemType {
    return reflection.isInstance(item, SystemType);
}

export type TypeExtended = ActionTypeExtended | ActiveEventTypeExtended | ActiveFlowTypeExtended | ActiveTaskTypeExtended | ActorTypeExtended | ContextDimensionDeviceTypeExtended | ContextDimensionSensorTypeExtended | DataAttributeTypeExtended | DataEntityClusterTypeExtended | DataEntitySubTypeExtended | DataEntityTypeExtended | ForeignKeyOnDeleteTypeExtended | MetricTypeExtended | NetworkConnectivityTypeExtended | ScreenSizeCategoryTypeExtended | SensorStatusTypeExtended | StereotypeTypeExtended | SystemSubTypeExtended | SystemTypeExtended | UIActionEventTypeExtended | UIActionTypeExtended | UIComponentPartSubTypeExtended | UIComponentPartTypeExtended | UIComponentSubTypeExtended | UIComponentTypeExtended | UIContainerSubTypeExtended | UIContainerTypeExtended | UIElementEventSubTypeExtended | UIElementEventTypeExtended | UIPortDefinitionTypeExtended | UISystemEventTypeExtended | UIThrowingEventTypeExtended | UIWireframeTypeExtended | UseCaseTypeExtended;

export const TypeExtended = 'TypeExtended';

export function isTypeExtended(item: unknown): item is TypeExtended {
    return reflection.isInstance(item, TypeExtended);
}

export type UIActionEventType = UIActionEventTypeExtendedRef | UIActionEventTypeOriginal;

export const UIActionEventType = 'UIActionEventType';

export function isUIActionEventType(item: unknown): item is UIActionEventType {
    return reflection.isInstance(item, UIActionEventType);
}

export type UIActionType = UIActionTypeExtendedRef | UIActionTypeOriginal;

export const UIActionType = 'UIActionType';

export function isUIActionType(item: unknown): item is UIActionType {
    return reflection.isInstance(item, UIActionType);
}

export type UICatchingEvent = UIActionEvent | UIElementEvent | UISystemEvent;

export const UICatchingEvent = 'UICatchingEvent';

export function isUICatchingEvent(item: unknown): item is UICatchingEvent {
    return reflection.isInstance(item, UICatchingEvent);
}

export type UIComponentPartSubType = UIComponentPartSubTypeExtendedRef | UIComponentPartSubTypeOriginal;

export const UIComponentPartSubType = 'UIComponentPartSubType';

export function isUIComponentPartSubType(item: unknown): item is UIComponentPartSubType {
    return reflection.isInstance(item, UIComponentPartSubType);
}

export type UIComponentPartType = UIComponentPartTypeExtendedRef | UIComponentPartTypeOriginal;

export const UIComponentPartType = 'UIComponentPartType';

export function isUIComponentPartType(item: unknown): item is UIComponentPartType {
    return reflection.isInstance(item, UIComponentPartType);
}

export type UIComponentSubType = UIComponentSubTypeExtendedRef | UIComponentSubTypeOriginal;

export const UIComponentSubType = 'UIComponentSubType';

export function isUIComponentSubType(item: unknown): item is UIComponentSubType {
    return reflection.isInstance(item, UIComponentSubType);
}

export type UIComponentType = UIComponentTypeExtendedRef | UIComponentTypeOriginal;

export const UIComponentType = 'UIComponentType';

export function isUIComponentType(item: unknown): item is UIComponentType {
    return reflection.isInstance(item, UIComponentType);
}

export type UIContainerSubType = UIContainerSubTypeExtendedRef | UIContainerSubTypeOriginal;

export const UIContainerSubType = 'UIContainerSubType';

export function isUIContainerSubType(item: unknown): item is UIContainerSubType {
    return reflection.isInstance(item, UIContainerSubType);
}

export type UIContainerType = UIContainerTypeExtendedRef | UIContainerTypeOriginal;

export const UIContainerType = 'UIContainerType';

export function isUIContainerType(item: unknown): item is UIContainerType {
    return reflection.isInstance(item, UIContainerType);
}

export type UIElement = UIComponent | UIComponentRef | UIContainer;

export const UIElement = 'UIElement';

export function isUIElement(item: unknown): item is UIElement {
    return reflection.isInstance(item, UIElement);
}

export type UIElementEventSubType = UIElementEventSubTypeExtendedRef | UIElementEventSubTypeOriginal;

export const UIElementEventSubType = 'UIElementEventSubType';

export function isUIElementEventSubType(item: unknown): item is UIElementEventSubType {
    return reflection.isInstance(item, UIElementEventSubType);
}

export type UIElementEventType = UIElementEventTypeExtendedRef | UIElementEventTypeOriginal;

export const UIElementEventType = 'UIElementEventType';

export function isUIElementEventType(item: unknown): item is UIElementEventType {
    return reflection.isInstance(item, UIElementEventType);
}

export type UIEvent = UICatchingEvent | UIThrowingEvent;

export const UIEvent = 'UIEvent';

export function isUIEvent(item: unknown): item is UIEvent {
    return reflection.isInstance(item, UIEvent);
}

export type UIExpression = UIContextExpression | UISimpleExpression;

export const UIExpression = 'UIExpression';

export function isUIExpression(item: unknown): item is UIExpression {
    return reflection.isInstance(item, UIExpression);
}

export type UIModelElement = FlowElement | UIExpression | UIParameter | UIParameterBinding | UIParameterBindingGroup;

export const UIModelElement = 'UIModelElement';

export function isUIModelElement(item: unknown): item is UIModelElement {
    return reflection.isInstance(item, UIModelElement);
}

export type UIPortDefinitionType = UIPortDefinitionTypeExtendedRef | UIPortDefinitionTypeOriginal;

export const UIPortDefinitionType = 'UIPortDefinitionType';

export function isUIPortDefinitionType(item: unknown): item is UIPortDefinitionType {
    return reflection.isInstance(item, UIPortDefinitionType);
}

export type UISystemEventType = UISystemEventTypeExtendedRef | UISystemEventTypeOriginal;

export const UISystemEventType = 'UISystemEventType';

export function isUISystemEventType(item: unknown): item is UISystemEventType {
    return reflection.isInstance(item, UISystemEventType);
}

export type UIThrowingEventType = UIThrowingEventTypeExtendedRef | UIThrowingEventTypeOriginal;

export const UIThrowingEventType = 'UIThrowingEventType';

export function isUIThrowingEventType(item: unknown): item is UIThrowingEventType {
    return reflection.isInstance(item, UIThrowingEventType);
}

export type UIWireframeType = UIWireframeTypeExtendedRef | UIWireframeTypeOriginal;

export const UIWireframeType = 'UIWireframeType';

export function isUIWireframeType(item: unknown): item is UIWireframeType {
    return reflection.isInstance(item, UIWireframeType);
}

export type UseCaseType = UseCaseTypeExtendedRef | UseCaseTypeOriginal;

export const UseCaseType = 'UseCaseType';

export function isUseCaseType(item: unknown): item is UseCaseType {
    return reflection.isInstance(item, UseCaseType);
}

export type UserActivityStatusType = UserActivityStatusTypeExtendedRef | UserActivityStatusTypeOriginal;

export const UserActivityStatusType = 'UserActivityStatusType';

export function isUserActivityStatusType(item: unknown): item is UserActivityStatusType {
    return reflection.isInstance(item, UserActivityStatusType);
}

export interface _Function extends AstNode {
    readonly $container: FunctionReference;
    readonly $type: '_Function';
    function: QualifiedName
    params: Array<Expression>
}

export const _Function = '_Function';

export function is_Function(item: unknown): item is _Function {
    return reflection.isInstance(item, _Function);
}

export interface ActionTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ActionTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const ActionTypeExtended = 'ActionTypeExtended';

export function isActionTypeExtended(item: unknown): item is ActionTypeExtended {
    return reflection.isInstance(item, ActionTypeExtended);
}

export interface ActionTypeExtendedRef extends AstNode {
    readonly $container: UCActions;
    readonly $type: 'ActionTypeExtendedRef';
    type: Reference<ActionTypeExtended>
}

export const ActionTypeExtendedRef = 'ActionTypeExtendedRef';

export function isActionTypeExtendedRef(item: unknown): item is ActionTypeExtendedRef {
    return reflection.isInstance(item, ActionTypeExtendedRef);
}

export interface ActionTypeOriginal extends AstNode {
    readonly $container: UCActions;
    readonly $type: 'ActionTypeOriginal';
    type: 'aCreate' | 'aDelete' | 'aRead' | 'aUpdate'
}

export const ActionTypeOriginal = 'ActionTypeOriginal';

export function isActionTypeOriginal(item: unknown): item is ActionTypeOriginal {
    return reflection.isInstance(item, ActionTypeOriginal);
}

export interface ActiveEvent extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ActiveEvent';
    description?: string
    isFinal: boolean
    isInitial: boolean
    name: string
    nameAlias?: string
    tags: Array<Tag>
    type: ActiveEventType
}

export const ActiveEvent = 'ActiveEvent';

export function isActiveEvent(item: unknown): item is ActiveEvent {
    return reflection.isInstance(item, ActiveEvent);
}

export interface ActiveEventTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ActiveEventTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const ActiveEventTypeExtended = 'ActiveEventTypeExtended';

export function isActiveEventTypeExtended(item: unknown): item is ActiveEventTypeExtended {
    return reflection.isInstance(item, ActiveEventTypeExtended);
}

export interface ActiveEventTypeExtendedRef extends AstNode {
    readonly $container: ActiveEvent;
    readonly $type: 'ActiveEventTypeExtendedRef';
    type: Reference<ActiveEventTypeExtended>
}

export const ActiveEventTypeExtendedRef = 'ActiveEventTypeExtendedRef';

export function isActiveEventTypeExtendedRef(item: unknown): item is ActiveEventTypeExtendedRef {
    return reflection.isInstance(item, ActiveEventTypeExtendedRef);
}

export interface ActiveEventTypeOriginal extends AstNode {
    readonly $container: ActiveEvent;
    readonly $type: 'ActiveEventTypeOriginal';
    type: 'Cancel' | 'Conditional' | 'Error' | 'Receive' | 'Send' | 'Signal' | 'Terminate' | 'Timer' | 'Undefined'
}

export const ActiveEventTypeOriginal = 'ActiveEventTypeOriginal';

export function isActiveEventTypeOriginal(item: unknown): item is ActiveEventTypeOriginal {
    return reflection.isInstance(item, ActiveEventTypeOriginal);
}

export interface ActiveFlow extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ActiveFlow';
    activeElements?: RefActiveElement
    condition?: string
    description?: string
    name: string
    nameAlias?: string
    tags: Array<Tag>
    type: ActiveFlowType
}

export const ActiveFlow = 'ActiveFlow';

export function isActiveFlow(item: unknown): item is ActiveFlow {
    return reflection.isInstance(item, ActiveFlow);
}

export interface ActiveFlowTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ActiveFlowTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const ActiveFlowTypeExtended = 'ActiveFlowTypeExtended';

export function isActiveFlowTypeExtended(item: unknown): item is ActiveFlowTypeExtended {
    return reflection.isInstance(item, ActiveFlowTypeExtended);
}

export interface ActiveFlowTypeExtendedRef extends AstNode {
    readonly $container: ActiveFlow;
    readonly $type: 'ActiveFlowTypeExtendedRef';
    type: Reference<ActiveFlowTypeExtended>
}

export const ActiveFlowTypeExtendedRef = 'ActiveFlowTypeExtendedRef';

export function isActiveFlowTypeExtendedRef(item: unknown): item is ActiveFlowTypeExtendedRef {
    return reflection.isInstance(item, ActiveFlowTypeExtendedRef);
}

export interface ActiveFlowTypeOriginal extends AstNode {
    readonly $container: ActiveFlow;
    readonly $type: 'ActiveFlowTypeOriginal';
    type: 'Parallel' | 'Sequence' | 'SequenceConditional'
}

export const ActiveFlowTypeOriginal = 'ActiveFlowTypeOriginal';

export function isActiveFlowTypeOriginal(item: unknown): item is ActiveFlowTypeOriginal {
    return reflection.isInstance(item, ActiveFlowTypeOriginal);
}

export interface ActiveTask extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ActiveTask';
    description?: string
    name: string
    nameAlias?: string
    partOf?: Reference<ActiveTask>
    tags: Array<Tag>
    type: ActiveTaskType
}

export const ActiveTask = 'ActiveTask';

export function isActiveTask(item: unknown): item is ActiveTask {
    return reflection.isInstance(item, ActiveTask);
}

export interface ActiveTaskTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ActiveTaskTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const ActiveTaskTypeExtended = 'ActiveTaskTypeExtended';

export function isActiveTaskTypeExtended(item: unknown): item is ActiveTaskTypeExtended {
    return reflection.isInstance(item, ActiveTaskTypeExtended);
}

export interface ActiveTaskTypeExtendedRef extends AstNode {
    readonly $container: ActiveTask;
    readonly $type: 'ActiveTaskTypeExtendedRef';
    type: Reference<ActiveTaskTypeExtended>
}

export const ActiveTaskTypeExtendedRef = 'ActiveTaskTypeExtendedRef';

export function isActiveTaskTypeExtendedRef(item: unknown): item is ActiveTaskTypeExtendedRef {
    return reflection.isInstance(item, ActiveTaskTypeExtendedRef);
}

export interface ActiveTaskTypeOriginal extends AstNode {
    readonly $container: ActiveTask;
    readonly $type: 'ActiveTaskTypeOriginal';
    type: 'BusinessRule' | 'Manual' | 'Receive' | 'Script' | 'Send' | 'Service' | 'Undefined' | 'User'
}

export const ActiveTaskTypeOriginal = 'ActiveTaskTypeOriginal';

export function isActiveTaskTypeOriginal(item: unknown): item is ActiveTaskTypeOriginal {
    return reflection.isInstance(item, ActiveTaskTypeOriginal);
}

export interface ActorTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ActorTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const ActorTypeExtended = 'ActorTypeExtended';

export function isActorTypeExtended(item: unknown): item is ActorTypeExtended {
    return reflection.isInstance(item, ActorTypeExtended);
}

export interface ActorTypeExtendedRef extends AstNode {
    readonly $container: ContextDimensionActor;
    readonly $type: 'ActorTypeExtendedRef';
    type: Reference<ActorTypeExtended>
}

export const ActorTypeExtendedRef = 'ActorTypeExtendedRef';

export function isActorTypeExtendedRef(item: unknown): item is ActorTypeExtendedRef {
    return reflection.isInstance(item, ActorTypeExtendedRef);
}

export interface ActorTypeOriginal extends AstNode {
    readonly $container: ContextDimensionActor;
    readonly $type: 'ActorTypeOriginal';
    type: 'ExternalSystem' | 'Timer' | 'User'
}

export const ActorTypeOriginal = 'ActorTypeOriginal';

export function isActorTypeOriginal(item: unknown): item is ActorTypeOriginal {
    return reflection.isInstance(item, ActorTypeOriginal);
}

export interface ArithmeticFormula extends AstNode {
    readonly $container: DataAttribute;
    readonly $type: 'ArithmeticFormula';
    expr: Expression
}

export const ArithmeticFormula = 'ArithmeticFormula';

export function isArithmeticFormula(item: unknown): item is ArithmeticFormula {
    return reflection.isInstance(item, ArithmeticFormula);
}

export interface ArithmeticSigned extends AstNode {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'ArithmeticSigned';
    expression: Expression
}

export const ArithmeticSigned = 'ArithmeticSigned';

export function isArithmeticSigned(item: unknown): item is ArithmeticSigned {
    return reflection.isInstance(item, ArithmeticSigned);
}

export interface AttributeValue extends AstNode {
    readonly $container: DataAttributeTableRow | _Date;
    readonly $type: 'AttributeValue' | 'Month' | '_Date';
    value: string
}

export const AttributeValue = 'AttributeValue';

export function isAttributeValue(item: unknown): item is AttributeValue {
    return reflection.isInstance(item, AttributeValue);
}

export interface BooleanExpression extends AstNode {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'BooleanExpression';
    left: Expression
    op: '&&' | 'and' | 'or' | '||'
    right: Expression
}

export const BooleanExpression = 'BooleanExpression';

export function isBooleanExpression(item: unknown): item is BooleanExpression {
    return reflection.isInstance(item, BooleanExpression);
}

export interface BooleanLiteral extends AstNode {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'BooleanLiteral';
    value: 'false' | 'true'
}

export const BooleanLiteral = 'BooleanLiteral';

export function isBooleanLiteral(item: unknown): item is BooleanLiteral {
    return reflection.isInstance(item, BooleanLiteral);
}

export interface BooleanNegation extends AstNode {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'BooleanNegation';
    expression: Expression
}

export const BooleanNegation = 'BooleanNegation';

export function isBooleanNegation(item: unknown): item is BooleanNegation {
    return reflection.isInstance(item, BooleanNegation);
}

export interface Check extends AstNode {
    readonly $container: DataAttributeConstraint | DataEntityConstraint;
    readonly $type: 'Check';
    checkExpression: string
    name: string
}

export const Check = 'Check';

export function isCheck(item: unknown): item is Check {
    return reflection.isInstance(item, Check);
}

export interface ChildDataEntity extends AstNode {
    readonly $container: DataEntityCluster;
    readonly $type: 'ChildDataEntity';
    child: Reference<DataEntity>
    childUses?: RefDataEntity
}

export const ChildDataEntity = 'ChildDataEntity';

export function isChildDataEntity(item: unknown): item is ChildDataEntity {
    return reflection.isInstance(item, ChildDataEntity);
}

export interface Comparison extends AstNode {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'Comparison';
    left: Expression
    op: '<' | '<=' | '>' | '>='
    right: Expression
}

export const Comparison = 'Comparison';

export function isComparison(item: unknown): item is Comparison {
    return reflection.isInstance(item, Comparison);
}

export interface Context extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'Context';
    actors: Array<Reference<ContextDimensionActor>>
    description?: string
    devices: Array<Reference<ContextDimensionDevice>>
    name: string
    nameAlias?: string
    sensors: Array<Reference<ContextDimensionSensor>>
    tags: Array<Tag>
}

export const Context = 'Context';

export function isContext(item: unknown): item is Context {
    return reflection.isInstance(item, Context);
}

export interface ContextDimensionActor extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ContextDimensionActor';
    description?: string
    name: string
    nameAlias?: string
    super?: Reference<ContextDimensionActor>
    tags: Array<Tag>
    type: ActorType
}

export const ContextDimensionActor = 'ContextDimensionActor';

export function isContextDimensionActor(item: unknown): item is ContextDimensionActor {
    return reflection.isInstance(item, ContextDimensionActor);
}

export interface ContextDimensionDevice extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ContextDimensionDevice';
    battery?: number
    cpuProcessor?: number
    cpuRam?: number
    description?: string
    diagonalSize?: number
    name: string
    nameAlias?: string
    networkConnectivity?: NetworkConnectivityType
    pixelSizeX?: number
    pixelSizeY?: number
    screenDensity?: number
    sizeCategory?: ScreenSizeCategoryType
    tags: Array<Tag>
    type: ContextDimensionDeviceType
}

export const ContextDimensionDevice = 'ContextDimensionDevice';

export function isContextDimensionDevice(item: unknown): item is ContextDimensionDevice {
    return reflection.isInstance(item, ContextDimensionDevice);
}

export interface ContextDimensionDeviceTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ContextDimensionDeviceTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const ContextDimensionDeviceTypeExtended = 'ContextDimensionDeviceTypeExtended';

export function isContextDimensionDeviceTypeExtended(item: unknown): item is ContextDimensionDeviceTypeExtended {
    return reflection.isInstance(item, ContextDimensionDeviceTypeExtended);
}

export interface ContextDimensionDeviceTypeExtendedRef extends AstNode {
    readonly $container: ContextDimensionDevice;
    readonly $type: 'ContextDimensionDeviceTypeExtendedRef';
    type: Reference<ContextDimensionDeviceTypeExtended>
}

export const ContextDimensionDeviceTypeExtendedRef = 'ContextDimensionDeviceTypeExtendedRef';

export function isContextDimensionDeviceTypeExtendedRef(item: unknown): item is ContextDimensionDeviceTypeExtendedRef {
    return reflection.isInstance(item, ContextDimensionDeviceTypeExtendedRef);
}

export interface ContextDimensionDeviceTypeOriginal extends AstNode {
    readonly $container: ContextDimensionDevice;
    readonly $type: 'ContextDimensionDeviceTypeOriginal';
    type: 'Any' | 'Desktop' | 'Laptop' | 'Other' | 'Smartphone' | 'Tablet'
}

export const ContextDimensionDeviceTypeOriginal = 'ContextDimensionDeviceTypeOriginal';

export function isContextDimensionDeviceTypeOriginal(item: unknown): item is ContextDimensionDeviceTypeOriginal {
    return reflection.isInstance(item, ContextDimensionDeviceTypeOriginal);
}

export interface ContextDimensionSensor extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ContextDimensionSensor';
    description?: string
    name: string
    nameAlias?: string
    sensorStatus?: SensorStatusType
    tags: Array<Tag>
    type: ContextDimensionSensorType
}

export const ContextDimensionSensor = 'ContextDimensionSensor';

export function isContextDimensionSensor(item: unknown): item is ContextDimensionSensor {
    return reflection.isInstance(item, ContextDimensionSensor);
}

export interface ContextDimensionSensorTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ContextDimensionSensorTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const ContextDimensionSensorTypeExtended = 'ContextDimensionSensorTypeExtended';

export function isContextDimensionSensorTypeExtended(item: unknown): item is ContextDimensionSensorTypeExtended {
    return reflection.isInstance(item, ContextDimensionSensorTypeExtended);
}

export interface ContextDimensionSensorTypeExtendedRef extends AstNode {
    readonly $container: ContextDimensionSensor;
    readonly $type: 'ContextDimensionSensorTypeExtendedRef';
    type: Reference<ContextDimensionSensorTypeExtended>
}

export const ContextDimensionSensorTypeExtendedRef = 'ContextDimensionSensorTypeExtendedRef';

export function isContextDimensionSensorTypeExtendedRef(item: unknown): item is ContextDimensionSensorTypeExtendedRef {
    return reflection.isInstance(item, ContextDimensionSensorTypeExtendedRef);
}

export interface ContextDimensionSensorTypeOriginal extends AstNode {
    readonly $container: ContextDimensionSensor;
    readonly $type: 'ContextDimensionSensorTypeOriginal';
    type: 'Accelerometer' | 'Camera' | 'Color' | 'Fingerprint' | 'HeartRate' | 'Humidity' | 'Infrared' | 'IrisScanner' | 'Light' | 'Localization' | 'Microphone' | 'Other' | 'Pressure' | 'Proximity' | 'Temperature' | 'Touch'
}

export const ContextDimensionSensorTypeOriginal = 'ContextDimensionSensorTypeOriginal';

export function isContextDimensionSensorTypeOriginal(item: unknown): item is ContextDimensionSensorTypeOriginal {
    return reflection.isInstance(item, ContextDimensionSensorTypeOriginal);
}

export interface ContextVariable extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ContextVariable';
    description?: string
    name: string
    nameAlias?: string
    tags: Array<Tag>
}

export const ContextVariable = 'ContextVariable';

export function isContextVariable(item: unknown): item is ContextVariable {
    return reflection.isInstance(item, ContextVariable);
}

export interface Data extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'Data';
    description?: string
    name: string
    nameAlias?: string
    table?: DataAttributeValues
    tags: Array<Tag>
    type: Reference<DataEntity>
}

export const Data = 'Data';

export function isData(item: unknown): item is Data {
    return reflection.isInstance(item, Data);
}

export interface DataAttribute extends AstNode {
    readonly $container: DataEntity;
    readonly $type: 'DataAttribute';
    constraint?: DataAttributeConstraint
    defaultValue?: string
    description?: string
    formula?: Formula
    helpMessage?: string
    name: string
    nameAlias?: string
    tags: Array<Tag>
    type: DataAttributeType
    values?: string
    visualizatione?: string
}

export const DataAttribute = 'DataAttribute';

export function isDataAttribute(item: unknown): item is DataAttribute {
    return reflection.isInstance(item, DataAttribute);
}

export interface DataAttributeConstraint extends AstNode {
    readonly $container: DataAttribute;
    readonly $type: 'DataAttributeConstraint';
    checks: Array<Check>
    derivedFrom?: Expression
    foreignKey?: ForeignKey
    isEncrypted?: 'Encrypted'
    isNotNull?: 'NotNull'
    isNotVisible?: 'NotVisible'
    isPrimaryKey?: 'PrimaryKey'
    isReadOnly?: 'ReadOnly'
    isUnique?: 'Unique'
    manyToMany?: ManyToMany
    multiplicity?: Multiplicity
}

export const DataAttributeConstraint = 'DataAttributeConstraint';

export function isDataAttributeConstraint(item: unknown): item is DataAttributeConstraint {
    return reflection.isInstance(item, DataAttributeConstraint);
}

export interface DataAttributeRefs extends AstNode {
    readonly $container: DataAttributeValues;
    readonly $type: 'DataAttributeRefs';
    attributeRef: Array<Reference<DataAttribute>>
}

export const DataAttributeRefs = 'DataAttributeRefs';

export function isDataAttributeRefs(item: unknown): item is DataAttributeRefs {
    return reflection.isInstance(item, DataAttributeRefs);
}

export interface DataAttributeRefsList extends AstNode {
    readonly $container: UIComponent | UIComponentPart;
    readonly $type: 'DataAttributeRefsList';
    attributeRef: Array<Reference<DataAttribute>>
}

export const DataAttributeRefsList = 'DataAttributeRefsList';

export function isDataAttributeRefsList(item: unknown): item is DataAttributeRefsList {
    return reflection.isInstance(item, DataAttributeRefsList);
}

export interface DataAttributeTableRow extends AstNode {
    readonly $container: DataAttributeValues;
    readonly $type: 'DataAttributeTableRow';
    attributeValues: Array<AttributeValue>
}

export const DataAttributeTableRow = 'DataAttributeTableRow';

export function isDataAttributeTableRow(item: unknown): item is DataAttributeTableRow {
    return reflection.isInstance(item, DataAttributeTableRow);
}

export interface DataAttributeType extends AstNode {
    readonly $container: DataAttribute | UIComponentPart;
    readonly $type: 'DataAttributeType' | 'DataAttributeTypeExtendedRef' | 'DataAttributeTypeOriginal' | 'DataEnumerationRef';
    size: DoubleOrInt
}

export const DataAttributeType = 'DataAttributeType';

export function isDataAttributeType(item: unknown): item is DataAttributeType {
    return reflection.isInstance(item, DataAttributeType);
}

export interface DataAttributeTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'DataAttributeTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const DataAttributeTypeExtended = 'DataAttributeTypeExtended';

export function isDataAttributeTypeExtended(item: unknown): item is DataAttributeTypeExtended {
    return reflection.isInstance(item, DataAttributeTypeExtended);
}

export interface DataAttributeValues extends AstNode {
    readonly $container: Data;
    readonly $type: 'DataAttributeValues';
    tableHeader: DataAttributeRefs
    tableRows: Array<DataAttributeTableRow>
}

export const DataAttributeValues = 'DataAttributeValues';

export function isDataAttributeValues(item: unknown): item is DataAttributeValues {
    return reflection.isInstance(item, DataAttributeValues);
}

export interface DataEntity extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'DataEntity';
    attributes: Array<DataAttribute>
    constraint?: DataEntityConstraint
    description?: string
    name: string
    nameAlias?: string
    subType?: DataEntitySubType
    super?: Reference<DataEntity>
    tags: Array<Tag>
    type: DataEntityType
}

export const DataEntity = 'DataEntity';

export function isDataEntity(item: unknown): item is DataEntity {
    return reflection.isInstance(item, DataEntity);
}

export interface DataEntityCluster extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'DataEntityCluster';
    children: Array<ChildDataEntity>
    description?: string
    main?: Reference<DataEntity>
    name: string
    nameAlias?: string
    tags: Array<Tag>
    type: DataEntityClusterType
    uses?: RefDataEntity
}

export const DataEntityCluster = 'DataEntityCluster';

export function isDataEntityCluster(item: unknown): item is DataEntityCluster {
    return reflection.isInstance(item, DataEntityCluster);
}

export interface DataEntityClusterTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'DataEntityClusterTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const DataEntityClusterTypeExtended = 'DataEntityClusterTypeExtended';

export function isDataEntityClusterTypeExtended(item: unknown): item is DataEntityClusterTypeExtended {
    return reflection.isInstance(item, DataEntityClusterTypeExtended);
}

export interface DataEntityClusterTypeExtendedRef extends AstNode {
    readonly $container: DataEntityCluster;
    readonly $type: 'DataEntityClusterTypeExtendedRef';
    type: Reference<DataEntityClusterTypeExtended>
}

export const DataEntityClusterTypeExtendedRef = 'DataEntityClusterTypeExtendedRef';

export function isDataEntityClusterTypeExtendedRef(item: unknown): item is DataEntityClusterTypeExtendedRef {
    return reflection.isInstance(item, DataEntityClusterTypeExtendedRef);
}

export interface DataEntityClusterTypeOriginal extends AstNode {
    readonly $container: DataEntityCluster;
    readonly $type: 'DataEntityClusterTypeOriginal';
    type: 'Document' | 'Master' | 'Other' | 'Parameter' | 'Reference' | 'Transaction'
}

export const DataEntityClusterTypeOriginal = 'DataEntityClusterTypeOriginal';

export function isDataEntityClusterTypeOriginal(item: unknown): item is DataEntityClusterTypeOriginal {
    return reflection.isInstance(item, DataEntityClusterTypeOriginal);
}

export interface DataEntityConstraint extends AstNode {
    readonly $container: DataEntity;
    readonly $type: 'DataEntityConstraint';
    checks: Array<Check>
    isEncrypted?: 'Encrypted'
    isReadOnly?: 'ReadOnly'
    showAsAttribute?: Reference<DataAttribute>
}

export const DataEntityConstraint = 'DataEntityConstraint';

export function isDataEntityConstraint(item: unknown): item is DataEntityConstraint {
    return reflection.isInstance(item, DataEntityConstraint);
}

export interface DataEntitySubTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'DataEntitySubTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const DataEntitySubTypeExtended = 'DataEntitySubTypeExtended';

export function isDataEntitySubTypeExtended(item: unknown): item is DataEntitySubTypeExtended {
    return reflection.isInstance(item, DataEntitySubTypeExtended);
}

export interface DataEntitySubTypeExtendedRef extends AstNode {
    readonly $container: DataEntity;
    readonly $type: 'DataEntitySubTypeExtendedRef';
    type: Reference<DataEntitySubTypeExtended>
}

export const DataEntitySubTypeExtendedRef = 'DataEntitySubTypeExtendedRef';

export function isDataEntitySubTypeExtendedRef(item: unknown): item is DataEntitySubTypeExtendedRef {
    return reflection.isInstance(item, DataEntitySubTypeExtendedRef);
}

export interface DataEntitySubTypeOriginal extends AstNode {
    readonly $container: DataEntity;
    readonly $type: 'DataEntitySubTypeOriginal';
    type: 'Other' | 'Regular' | 'Weak'
}

export const DataEntitySubTypeOriginal = 'DataEntitySubTypeOriginal';

export function isDataEntitySubTypeOriginal(item: unknown): item is DataEntitySubTypeOriginal {
    return reflection.isInstance(item, DataEntitySubTypeOriginal);
}

export interface DataEntityTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'DataEntityTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const DataEntityTypeExtended = 'DataEntityTypeExtended';

export function isDataEntityTypeExtended(item: unknown): item is DataEntityTypeExtended {
    return reflection.isInstance(item, DataEntityTypeExtended);
}

export interface DataEntityTypeExtendedRef extends AstNode {
    readonly $container: DataEntity;
    readonly $type: 'DataEntityTypeExtendedRef';
    type: Reference<DataEntityTypeExtended>
}

export const DataEntityTypeExtendedRef = 'DataEntityTypeExtendedRef';

export function isDataEntityTypeExtendedRef(item: unknown): item is DataEntityTypeExtendedRef {
    return reflection.isInstance(item, DataEntityTypeExtendedRef);
}

export interface DataEntityTypeOriginal extends AstNode {
    readonly $container: DataEntity;
    readonly $type: 'DataEntityTypeOriginal';
    type: 'Document' | 'Master' | 'Other' | 'Parameter' | 'Reference' | 'Transaction'
}

export const DataEntityTypeOriginal = 'DataEntityTypeOriginal';

export function isDataEntityTypeOriginal(item: unknown): item is DataEntityTypeOriginal {
    return reflection.isInstance(item, DataEntityTypeOriginal);
}

export interface DataEnumeration extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'DataEnumeration';
    description?: string
    name: string
    nameAlias?: string
    tags: Array<Tag>
    values: Array<DataEnumerationElement>
}

export const DataEnumeration = 'DataEnumeration';

export function isDataEnumeration(item: unknown): item is DataEnumeration {
    return reflection.isInstance(item, DataEnumeration);
}

export interface DataEnumerationElement extends AstNode {
    readonly $container: DataEnumeration;
    readonly $type: 'DataEnumerationElement';
    name: string
    nameAlias?: string
}

export const DataEnumerationElement = 'DataEnumerationElement';

export function isDataEnumerationElement(item: unknown): item is DataEnumerationElement {
    return reflection.isInstance(item, DataEnumerationElement);
}

export interface DetailsFormula extends AstNode {
    readonly $container: DataAttribute;
    readonly $type: 'DetailsFormula';
    attr?: Reference<DataAttribute>
    dataEntity?: Reference<DataEntityGeneric>
    type: 'count' | 'sum'
}

export const DetailsFormula = 'DetailsFormula';

export function isDetailsFormula(item: unknown): item is DetailsFormula {
    return reflection.isInstance(item, DetailsFormula);
}

export interface Equals extends AstNode {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'Equals';
    left: Expression
    op: '!=' | '!~' | '==' | '=~' | 'is'
    right: Expression
}

export const Equals = 'Equals';

export function isEquals(item: unknown): item is Equals {
    return reflection.isInstance(item, Equals);
}

export interface ForeignKey extends AstNode {
    readonly $container: DataAttributeConstraint;
    readonly $type: 'ForeignKey';
    defaultValue?: string
    onDelete?: ForeignKeyOnDeleteType
    showAsField?: Reference<DataAttribute>
    targetEntity: Reference<DataEntity>
    toField?: Reference<DataAttribute>
}

export const ForeignKey = 'ForeignKey';

export function isForeignKey(item: unknown): item is ForeignKey {
    return reflection.isInstance(item, ForeignKey);
}

export interface ForeignKeyOnDeleteTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ForeignKeyOnDeleteTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const ForeignKeyOnDeleteTypeExtended = 'ForeignKeyOnDeleteTypeExtended';

export function isForeignKeyOnDeleteTypeExtended(item: unknown): item is ForeignKeyOnDeleteTypeExtended {
    return reflection.isInstance(item, ForeignKeyOnDeleteTypeExtended);
}

export interface ForeignKeyOnDeleteTypeExtendedRef extends AstNode {
    readonly $container: ForeignKey;
    readonly $type: 'ForeignKeyOnDeleteTypeExtendedRef';
    type: Reference<ForeignKeyOnDeleteTypeExtended>
}

export const ForeignKeyOnDeleteTypeExtendedRef = 'ForeignKeyOnDeleteTypeExtendedRef';

export function isForeignKeyOnDeleteTypeExtendedRef(item: unknown): item is ForeignKeyOnDeleteTypeExtendedRef {
    return reflection.isInstance(item, ForeignKeyOnDeleteTypeExtendedRef);
}

export interface ForeignKeyOnDeleteTypeOriginal extends AstNode {
    readonly $container: ForeignKey;
    readonly $type: 'ForeignKeyOnDeleteTypeOriginal';
    type: 'CASCADE' | 'PROTECT' | 'SET_DEFAULT' | 'SET_NULL'
}

export const ForeignKeyOnDeleteTypeOriginal = 'ForeignKeyOnDeleteTypeOriginal';

export function isForeignKeyOnDeleteTypeOriginal(item: unknown): item is ForeignKeyOnDeleteTypeOriginal {
    return reflection.isInstance(item, ForeignKeyOnDeleteTypeOriginal);
}

export interface Import extends AstNode {
    readonly $container: PackageSystem;
    readonly $type: 'Import';
    importedNamespace: QualifiedNameWithWildcard
}

export const Import = 'Import';

export function isImport(item: unknown): item is Import {
    return reflection.isInstance(item, Import);
}

export interface IncludeAll extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'IncludeAll';
    description?: string
    system: Reference<System>
    tags: Array<Tag>
}

export const IncludeAll = 'IncludeAll';

export function isIncludeAll(item: unknown): item is IncludeAll {
    return reflection.isInstance(item, IncludeAll);
}

export interface IncludeElement extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'IncludeElement';
    description?: string
    element: Reference<SystemElement>
    system: Reference<System>
    tags: Array<Tag>
    type: IncludeSystemElementType
    updateFields?: UpdateFields
}

export const IncludeElement = 'IncludeElement';

export function isIncludeElement(item: unknown): item is IncludeElement {
    return reflection.isInstance(item, IncludeElement);
}

export interface IncludeSystemElementType extends AstNode {
    readonly $container: IncludeElement;
    readonly $type: 'IncludeSystemElementType';
    type: 'ActiveEvent' | 'ActiveFlow' | 'ActiveTask' | 'Actor' | 'DataEntity' | 'DataEntityCluster' | 'DataEnumeration' | 'UseCase'
}

export const IncludeSystemElementType = 'IncludeSystemElementType';

export function isIncludeSystemElementType(item: unknown): item is IncludeSystemElementType {
    return reflection.isInstance(item, IncludeSystemElementType);
}

export interface IntegerLiteral extends AstNode {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'IntegerLiteral';
    value: number
}

export const IntegerLiteral = 'IntegerLiteral';

export function isIntegerLiteral(item: unknown): item is IntegerLiteral {
    return reflection.isInstance(item, IntegerLiteral);
}

export interface ManyToMany extends AstNode {
    readonly $container: DataAttributeConstraint;
    readonly $type: 'ManyToMany';
    targetEntity: Reference<DataEntity>
    throughEntity?: Reference<DataEntity>
    throughSourceField?: Reference<DataAttribute>
    throughTargetField?: Reference<DataAttribute>
}

export const ManyToMany = 'ManyToMany';

export function isManyToMany(item: unknown): item is ManyToMany {
    return reflection.isInstance(item, ManyToMany);
}

export interface Membership extends AstNode {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'Membership';
    left: Expression
    op: 'in' | 'not_in'
    right: Array<Expression>
}

export const Membership = 'Membership';

export function isMembership(item: unknown): item is Membership {
    return reflection.isInstance(item, Membership);
}

export interface MetricTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'MetricTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const MetricTypeExtended = 'MetricTypeExtended';

export function isMetricTypeExtended(item: unknown): item is MetricTypeExtended {
    return reflection.isInstance(item, MetricTypeExtended);
}

export interface MetricTypeExtendedRef extends AstNode {
    readonly $type: 'MetricTypeExtendedRef';
    type: Reference<MetricTypeExtended>
}

export const MetricTypeExtendedRef = 'MetricTypeExtendedRef';

export function isMetricTypeExtendedRef(item: unknown): item is MetricTypeExtendedRef {
    return reflection.isInstance(item, MetricTypeExtendedRef);
}

export interface MetricTypeOriginal extends AstNode {
    readonly $type: 'MetricTypeOriginal';
    type: 'Capacity_EByte' | 'Capacity_GByte' | 'Capacity_KByte' | 'Capacity_MByte' | 'Capacity_PByte' | 'Capacity_TByte' | 'Click' | 'Error' | 'Error_PerTask' | 'Frequency_Hz' | 'Frequency_KHz' | 'Frequency_MHz' | 'Other' | 'Range_Binary' | 'Range_LikertScale' | 'Range_Other' | 'Task' | 'Time_Day' | 'Time_Hour' | 'Time_Min' | 'Time_Sec' | 'Time_mSec'
}

export const MetricTypeOriginal = 'MetricTypeOriginal';

export function isMetricTypeOriginal(item: unknown): item is MetricTypeOriginal {
    return reflection.isInstance(item, MetricTypeOriginal);
}

export interface Minus extends AstNode {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'Minus';
    left: Expression
    right: Expression
}

export const Minus = 'Minus';

export function isMinus(item: unknown): item is Minus {
    return reflection.isInstance(item, Minus);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    packages: Array<PackageAbstract>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface MultiOrDivOrMod extends AstNode {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'MultiOrDivOrMod';
    left: Expression
    op: '%' | '*' | '/'
    right: Expression
}

export const MultiOrDivOrMod = 'MultiOrDivOrMod';

export function isMultiOrDivOrMod(item: unknown): item is MultiOrDivOrMod {
    return reflection.isInstance(item, MultiOrDivOrMod);
}

export interface Multiplicity extends AstNode {
    readonly $container: DataAttributeConstraint;
    readonly $type: 'Multiplicity';
    type: '"*"' | '"0"' | '"0..1"' | '"1"' | string
}

export const Multiplicity = 'Multiplicity';

export function isMultiplicity(item: unknown): item is Multiplicity {
    return reflection.isInstance(item, Multiplicity);
}

export interface NetworkConnectivityTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'NetworkConnectivityTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const NetworkConnectivityTypeExtended = 'NetworkConnectivityTypeExtended';

export function isNetworkConnectivityTypeExtended(item: unknown): item is NetworkConnectivityTypeExtended {
    return reflection.isInstance(item, NetworkConnectivityTypeExtended);
}

export interface NetworkConnectivityTypeExtendedRef extends AstNode {
    readonly $container: ContextDimensionDevice;
    readonly $type: 'NetworkConnectivityTypeExtendedRef';
    type: Reference<NetworkConnectivityTypeExtended>
}

export const NetworkConnectivityTypeExtendedRef = 'NetworkConnectivityTypeExtendedRef';

export function isNetworkConnectivityTypeExtendedRef(item: unknown): item is NetworkConnectivityTypeExtendedRef {
    return reflection.isInstance(item, NetworkConnectivityTypeExtendedRef);
}

export interface NetworkConnectivityTypeOriginal extends AstNode {
    readonly $container: ContextDimensionDevice;
    readonly $type: 'NetworkConnectivityTypeOriginal';
    type: 'Any' | 'BLUETOOTH' | 'None' | 'WIFI' | 'WIMAX'
}

export const NetworkConnectivityTypeOriginal = 'NetworkConnectivityTypeOriginal';

export function isNetworkConnectivityTypeOriginal(item: unknown): item is NetworkConnectivityTypeOriginal {
    return reflection.isInstance(item, NetworkConnectivityTypeOriginal);
}

export interface NullLiteral extends AstNode {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'NullLiteral';
    value: 'null'
}

export const NullLiteral = 'NullLiteral';

export function isNullLiteral(item: unknown): item is NullLiteral {
    return reflection.isInstance(item, NullLiteral);
}

export interface PackageSystem extends AstNode {
    readonly $container: Model;
    readonly $type: 'PackageSystem';
    imports: Array<Import>
    name: QualifiedName
    system: System
}

export const PackageSystem = 'PackageSystem';

export function isPackageSystem(item: unknown): item is PackageSystem {
    return reflection.isInstance(item, PackageSystem);
}

export interface Plus extends AstNode {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'Plus';
    left: Expression
}

export const Plus = 'Plus';

export function isPlus(item: unknown): item is Plus {
    return reflection.isInstance(item, Plus);
}

export interface RefActiveElement extends AstNode {
    readonly $container: ActiveFlow;
    readonly $type: 'RefActiveElement';
    refActiveElement: Array<Reference<ActiveElement>>
}

export const RefActiveElement = 'RefActiveElement';

export function isRefActiveElement(item: unknown): item is RefActiveElement {
    return reflection.isInstance(item, RefActiveElement);
}

export interface RefActor extends AstNode {
    readonly $container: UseCase;
    readonly $type: 'RefActor';
    refs: Array<Reference<ContextDimensionActor>>
}

export const RefActor = 'RefActor';

export function isRefActor(item: unknown): item is RefActor {
    return reflection.isInstance(item, RefActor);
}

export interface RefDataEntity extends AstNode {
    readonly $container: ChildDataEntity | DataEntityCluster;
    readonly $type: 'RefDataEntity';
    refDataEntity: Array<Reference<DataEntity>>
}

export const RefDataEntity = 'RefDataEntity';

export function isRefDataEntity(item: unknown): item is RefDataEntity {
    return reflection.isInstance(item, RefDataEntity);
}

export interface RefFlowTo extends AstNode {
    readonly $container: UIActionEvent | UIContainer | UIElementEvent | UISystemEvent | UIThrowingEvent;
    readonly $type: 'RefFlowTo';
    parameterBindingGroup: Array<UIParameterBindingGroup>
    refFlowTo: Array<Reference<FlowElement>>
}

export const RefFlowTo = 'RefFlowTo';

export function isRefFlowTo(item: unknown): item is RefFlowTo {
    return reflection.isInstance(item, RefFlowTo);
}

export interface RefSystems extends AstNode {
    readonly $type: 'RefSystems';
    refs: Array<Reference<System>>
}

export const RefSystems = 'RefSystems';

export function isRefSystems(item: unknown): item is RefSystems {
    return reflection.isInstance(item, RefSystems);
}

export interface RefUC extends AstNode {
    readonly $container: UCIncludes;
    readonly $type: 'RefUC';
    refs: Array<Reference<UseCase>>
}

export const RefUC = 'RefUC';

export function isRefUC(item: unknown): item is RefUC {
    return reflection.isInstance(item, RefUC);
}

export interface ScreenSizeCategoryTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'ScreenSizeCategoryTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const ScreenSizeCategoryTypeExtended = 'ScreenSizeCategoryTypeExtended';

export function isScreenSizeCategoryTypeExtended(item: unknown): item is ScreenSizeCategoryTypeExtended {
    return reflection.isInstance(item, ScreenSizeCategoryTypeExtended);
}

export interface ScreenSizeCategoryTypeExtendedRef extends AstNode {
    readonly $container: ContextDimensionDevice;
    readonly $type: 'ScreenSizeCategoryTypeExtendedRef';
    type: Reference<ScreenSizeCategoryTypeExtended>
}

export const ScreenSizeCategoryTypeExtendedRef = 'ScreenSizeCategoryTypeExtendedRef';

export function isScreenSizeCategoryTypeExtendedRef(item: unknown): item is ScreenSizeCategoryTypeExtendedRef {
    return reflection.isInstance(item, ScreenSizeCategoryTypeExtendedRef);
}

export interface ScreenSizeCategoryTypeOriginal extends AstNode {
    readonly $container: ContextDimensionDevice;
    readonly $type: 'ScreenSizeCategoryTypeOriginal';
    type: 'Any' | 'ExtraLarge' | 'Large' | 'Normal' | 'Small'
}

export const ScreenSizeCategoryTypeOriginal = 'ScreenSizeCategoryTypeOriginal';

export function isScreenSizeCategoryTypeOriginal(item: unknown): item is ScreenSizeCategoryTypeOriginal {
    return reflection.isInstance(item, ScreenSizeCategoryTypeOriginal);
}

export interface SensorStatusTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'SensorStatusTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const SensorStatusTypeExtended = 'SensorStatusTypeExtended';

export function isSensorStatusTypeExtended(item: unknown): item is SensorStatusTypeExtended {
    return reflection.isInstance(item, SensorStatusTypeExtended);
}

export interface SensorStatusTypeExtendedRef extends AstNode {
    readonly $container: ContextDimensionSensor;
    readonly $type: 'SensorStatusTypeExtendedRef';
    type: Reference<SensorStatusTypeExtended>
}

export const SensorStatusTypeExtendedRef = 'SensorStatusTypeExtendedRef';

export function isSensorStatusTypeExtendedRef(item: unknown): item is SensorStatusTypeExtendedRef {
    return reflection.isInstance(item, SensorStatusTypeExtendedRef);
}

export interface SensorStatusTypeOriginal extends AstNode {
    readonly $container: ContextDimensionSensor;
    readonly $type: 'SensorStatusTypeOriginal';
    type: 'Active' | 'Inactive' | 'NotDefined'
}

export const SensorStatusTypeOriginal = 'SensorStatusTypeOriginal';

export function isSensorStatusTypeOriginal(item: unknown): item is SensorStatusTypeOriginal {
    return reflection.isInstance(item, SensorStatusTypeOriginal);
}

export interface Stereotype extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'Stereotype';
    description?: string
    name: string
    nameAlias?: string
    tags: Array<Tag>
    type: StereotypeType
}

export const Stereotype = 'Stereotype';

export function isStereotype(item: unknown): item is Stereotype {
    return reflection.isInstance(item, Stereotype);
}

export interface StereotypeTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'StereotypeTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const StereotypeTypeExtended = 'StereotypeTypeExtended';

export function isStereotypeTypeExtended(item: unknown): item is StereotypeTypeExtended {
    return reflection.isInstance(item, StereotypeTypeExtended);
}

export interface StereotypeTypeExtendedRef extends AstNode {
    readonly $container: Stereotype;
    readonly $type: 'StereotypeTypeExtendedRef';
    type: Reference<StereotypeTypeExtended>
}

export const StereotypeTypeExtendedRef = 'StereotypeTypeExtendedRef';

export function isStereotypeTypeExtendedRef(item: unknown): item is StereotypeTypeExtendedRef {
    return reflection.isInstance(item, StereotypeTypeExtendedRef);
}

export interface StereotypeTypeOriginal extends AstNode {
    readonly $container: Stereotype;
    readonly $type: 'StereotypeTypeOriginal';
    type: 'ActiveEvent' | 'ActiveTask' | 'Actor' | 'DataEntity' | 'DataEntityCluster' | 'Other' | 'System' | 'UseCase'
}

export const StereotypeTypeOriginal = 'StereotypeTypeOriginal';

export function isStereotypeTypeOriginal(item: unknown): item is StereotypeTypeOriginal {
    return reflection.isInstance(item, StereotypeTypeOriginal);
}

export interface StringLiteral extends AstNode {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'StringLiteral';
    value: string
}

export const StringLiteral = 'StringLiteral';

export function isStringLiteral(item: unknown): item is StringLiteral {
    return reflection.isInstance(item, StringLiteral);
}

export interface System extends AstNode {
    readonly $container: PackageSystem;
    readonly $type: 'System';
    description?: string
    isFinal: boolean
    isReusable: boolean
    isTestSuite: boolean
    name: string
    nameAlias?: string
    partOf?: Reference<System>
    subType?: SystemSubType
    sut?: Reference<System>
    systemConcepts: Array<SystemConcept>
    tags: Array<Tag>
    type: SystemType
    vendor?: string
    version?: string
}

export const System = 'System';

export function isSystem(item: unknown): item is System {
    return reflection.isInstance(item, System);
}

export interface SystemSubTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'SystemSubTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const SystemSubTypeExtended = 'SystemSubTypeExtended';

export function isSystemSubTypeExtended(item: unknown): item is SystemSubTypeExtended {
    return reflection.isInstance(item, SystemSubTypeExtended);
}

export interface SystemSubTypeExtendedRef extends AstNode {
    readonly $container: System;
    readonly $type: 'SystemSubTypeExtendedRef';
    type: Reference<SystemSubTypeExtended>
}

export const SystemSubTypeExtendedRef = 'SystemSubTypeExtendedRef';

export function isSystemSubTypeExtendedRef(item: unknown): item is SystemSubTypeExtendedRef {
    return reflection.isInstance(item, SystemSubTypeExtendedRef);
}

export interface SystemSubTypeOriginal extends AstNode {
    readonly $container: System;
    readonly $type: 'SystemSubTypeOriginal';
    type: 'Application_Actuator' | 'Application_Desktop' | 'Application_Mobile' | 'Application_Other' | 'Application_Sensor' | 'Application_Web' | 'Business_IT' | 'Business_Other' | 'Business_PublicSector' | 'HardwareSystem_Actuator' | 'HardwareSystem_Desktop' | 'HardwareSystem_Laptop' | 'HardwareSystem_Network' | 'HardwareSystem_Other' | 'HardwareSystem_Printer' | 'HardwareSystem_Sensor' | 'HardwareSystem_Server' | 'HardwareSystem_Smartphone' | 'HardwareSystem_Smartwatch' | 'HardwareSystem_Storage' | 'SoftwareSystem_DBMS' | 'SoftwareSystem_EmailClient' | 'SoftwareSystem_EmailServer' | 'SoftwareSystem_OS' | 'SoftwareSystem_OfficeTool' | 'SoftwareSystem_Other' | 'SoftwareSystem_OtherClient' | 'SoftwareSystem_OtherServer' | 'SoftwareSystem_VM' | 'SoftwareSystem_WebClient' | 'SoftwareSystem_WebServer'
}

export const SystemSubTypeOriginal = 'SystemSubTypeOriginal';

export function isSystemSubTypeOriginal(item: unknown): item is SystemSubTypeOriginal {
    return reflection.isInstance(item, SystemSubTypeOriginal);
}

export interface SystemTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'SystemTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const SystemTypeExtended = 'SystemTypeExtended';

export function isSystemTypeExtended(item: unknown): item is SystemTypeExtended {
    return reflection.isInstance(item, SystemTypeExtended);
}

export interface SystemTypeExtendedRef extends AstNode {
    readonly $container: System;
    readonly $type: 'SystemTypeExtendedRef';
    type: Reference<SystemTypeExtended>
}

export const SystemTypeExtendedRef = 'SystemTypeExtendedRef';

export function isSystemTypeExtendedRef(item: unknown): item is SystemTypeExtendedRef {
    return reflection.isInstance(item, SystemTypeExtendedRef);
}

export interface SystemTypeOriginal extends AstNode {
    readonly $container: System;
    readonly $type: 'SystemTypeOriginal';
    type: 'Application' | 'Business' | 'HardwareSystem' | 'Other' | 'SoftwareSystem'
}

export const SystemTypeOriginal = 'SystemTypeOriginal';

export function isSystemTypeOriginal(item: unknown): item is SystemTypeOriginal {
    return reflection.isInstance(item, SystemTypeOriginal);
}

export interface Tag extends AstNode {
    readonly $container: ActiveEvent | ActiveFlow | ActiveTask | Context | ContextDimensionActor | ContextDimensionDevice | ContextDimensionSensor | ContextVariable | Data | DataAttribute | DataEntity | DataEntityCluster | DataEnumeration | IncludeAll | IncludeElement | Stereotype | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIPortDefinition | UISystemEvent | UIThrowingEvent | UseCase;
    readonly $type: 'Tag';
    nameAlias: string
    value?: string
}

export const Tag = 'Tag';

export function isTag(item: unknown): item is Tag {
    return reflection.isInstance(item, Tag);
}

export interface TernaryExpression extends AstNode {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'FunctionReference' | 'TernaryExpression' | 'VariableReference';
    expression: Expression
    falsevalue?: Expression
    truevalue: Expression
}

export const TernaryExpression = 'TernaryExpression';

export function isTernaryExpression(item: unknown): item is TernaryExpression {
    return reflection.isInstance(item, TernaryExpression);
}

export interface UCActions extends AstNode {
    readonly $container: UseCase;
    readonly $type: 'UCActions';
    actions: Array<ActionType>
}

export const UCActions = 'UCActions';

export function isUCActions(item: unknown): item is UCActions {
    return reflection.isInstance(item, UCActions);
}

export interface UCExtends extends AstNode {
    readonly $container: UseCase;
    readonly $type: 'UCExtends';
    extensionPoint: Reference<UCExtensionPoint>
    usecase: Reference<UseCase>
}

export const UCExtends = 'UCExtends';

export function isUCExtends(item: unknown): item is UCExtends {
    return reflection.isInstance(item, UCExtends);
}

export interface UCExtensionPoint extends AstNode {
    readonly $container: UCExtensionPoints;
    readonly $type: 'UCExtensionPoint';
    description?: string
    name: string
}

export const UCExtensionPoint = 'UCExtensionPoint';

export function isUCExtensionPoint(item: unknown): item is UCExtensionPoint {
    return reflection.isInstance(item, UCExtensionPoint);
}

export interface UCExtensionPoints extends AstNode {
    readonly $container: UseCase;
    readonly $type: 'UCExtensionPoints';
    extensionPoints: Array<UCExtensionPoint>
}

export const UCExtensionPoints = 'UCExtensionPoints';

export function isUCExtensionPoints(item: unknown): item is UCExtensionPoints {
    return reflection.isInstance(item, UCExtensionPoints);
}

export interface UCIncludes extends AstNode {
    readonly $container: UseCase;
    readonly $type: 'UCIncludes';
    includes: Array<RefUC>
}

export const UCIncludes = 'UCIncludes';

export function isUCIncludes(item: unknown): item is UCIncludes {
    return reflection.isInstance(item, UCIncludes);
}

export interface UIAction extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIAction';
    description?: string
    name: string
    nameAlias?: string
    tags: Array<Tag>
    type: UIActionType
    uiActionEvents: Array<UIActionEvent>
    uiParameters: Array<UIParameter>
}

export const UIAction = 'UIAction';

export function isUIAction(item: unknown): item is UIAction {
    return reflection.isInstance(item, UIAction);
}

export interface UIActionEvent extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIActionEvent';
    activationExpression?: UIExpression
    description?: string
    flowsTo?: RefFlowTo
    interactionFlowExpression?: UIExpression
    name: string
    nameAlias?: string
    tags: Array<Tag>
    type: UIActionEventType
    uiParameters: Array<UIParameter>
}

export const UIActionEvent = 'UIActionEvent';

export function isUIActionEvent(item: unknown): item is UIActionEvent {
    return reflection.isInstance(item, UIActionEvent);
}

export interface UIActionEventTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIActionEventTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UIActionEventTypeExtended = 'UIActionEventTypeExtended';

export function isUIActionEventTypeExtended(item: unknown): item is UIActionEventTypeExtended {
    return reflection.isInstance(item, UIActionEventTypeExtended);
}

export interface UIActionEventTypeExtendedRef extends AstNode {
    readonly $container: UIActionEvent;
    readonly $type: 'UIActionEventTypeExtendedRef';
    type: Reference<UIActionEventTypeExtended>
}

export const UIActionEventTypeExtendedRef = 'UIActionEventTypeExtendedRef';

export function isUIActionEventTypeExtendedRef(item: unknown): item is UIActionEventTypeExtendedRef {
    return reflection.isInstance(item, UIActionEventTypeExtendedRef);
}

export interface UIActionEventTypeOriginal extends AstNode {
    readonly $container: UIActionEvent;
    readonly $type: 'UIActionEventTypeOriginal';
    type: 'Exception' | 'Normal' | 'Other'
}

export const UIActionEventTypeOriginal = 'UIActionEventTypeOriginal';

export function isUIActionEventTypeOriginal(item: unknown): item is UIActionEventTypeOriginal {
    return reflection.isInstance(item, UIActionEventTypeOriginal);
}

export interface UIActionTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIActionTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UIActionTypeExtended = 'UIActionTypeExtended';

export function isUIActionTypeExtended(item: unknown): item is UIActionTypeExtended {
    return reflection.isInstance(item, UIActionTypeExtended);
}

export interface UIActionTypeExtendedRef extends AstNode {
    readonly $container: UIAction;
    readonly $type: 'UIActionTypeExtendedRef';
    type: Reference<UIActionTypeExtended>
}

export const UIActionTypeExtendedRef = 'UIActionTypeExtendedRef';

export function isUIActionTypeExtendedRef(item: unknown): item is UIActionTypeExtendedRef {
    return reflection.isInstance(item, UIActionTypeExtendedRef);
}

export interface UIActionTypeOriginal extends AstNode {
    readonly $container: UIAction;
    readonly $type: 'UIActionTypeOriginal';
    type: 'Client' | 'NotSpecified' | 'Server'
}

export const UIActionTypeOriginal = 'UIActionTypeOriginal';

export function isUIActionTypeOriginal(item: unknown): item is UIActionTypeOriginal {
    return reflection.isInstance(item, UIActionTypeOriginal);
}

export interface UIComponent extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIComponent';
    dataEntity?: Reference<DataEntityGeneric>
    dataFlowTos: Array<Reference<UIComponent>>
    dataParameterBindingGroups: Array<UIParameterBindingGroup>
    description?: string
    displayAttributes?: DataAttributeRefsList
    drnDisplayAttributes?: DataAttributeRefsList
    filterAttributes?: DataAttributeRefsList
    filterExpression?: UIExpression
    isActive: boolean
    isScrollable: boolean
    isSlider: boolean
    message?: string
    name: string
    nameAlias?: string
    orderBy?: Reference<DataAttribute>
    rnDataEntity?: Reference<DataEntityGeneric>
    rnFilterExpression?: UIExpression
    rnOrderBy?: Reference<DataAttribute>
    rnSortAttributes?: DataAttributeRefsList
    searchAttributes?: DataAttributeRefsList
    sortAttributes?: DataAttributeRefsList
    subType?: UIComponentSubType
    tags: Array<Tag>
    title?: string
    type: UIComponentType
    uiActivationExpression?: UIExpression
    uiComponentParts: Array<UIComponentPart>
    uiElementEvents: Array<UIElementEvent>
    uiParameters: Array<UIParameter>
}

export const UIComponent = 'UIComponent';

export function isUIComponent(item: unknown): item is UIComponent {
    return reflection.isInstance(item, UIComponent);
}

export interface UIComponentPart extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIComponentPart';
    blockIf?: Expression
    dataAttributeBinding?: Reference<DataAttribute>
    dataEntity?: Reference<DataEntityGeneric>
    defaultValue?: string
    description?: string
    displayAttributes?: DataAttributeRefsList
    filterAttributes?: DataAttributeRefsList
    filterExpression?: UIExpression
    isHidden: boolean
    isReadOnly: boolean
    name: string
    nameAlias?: string
    orderBy?: Reference<DataAttribute>
    searchAttributes?: DataAttributeRefsList
    showIf?: Expression
    sortAttributes?: DataAttributeRefsList
    subType?: UIComponentPartSubType
    tags: Array<Tag>
    type: UIComponentPartType
    uiActivationExpression?: UIExpression
    uiComponentParts: Array<UIComponentPart>
    uiElementEvents: Array<UIElementEvent>
    valueType?: DataAttributeType
    wireframeType?: UIWireframeType
}

export const UIComponentPart = 'UIComponentPart';

export function isUIComponentPart(item: unknown): item is UIComponentPart {
    return reflection.isInstance(item, UIComponentPart);
}

export interface UIComponentPartSubTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIComponentPartSubTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UIComponentPartSubTypeExtended = 'UIComponentPartSubTypeExtended';

export function isUIComponentPartSubTypeExtended(item: unknown): item is UIComponentPartSubTypeExtended {
    return reflection.isInstance(item, UIComponentPartSubTypeExtended);
}

export interface UIComponentPartSubTypeExtendedRef extends AstNode {
    readonly $container: UIComponentPart;
    readonly $type: 'UIComponentPartSubTypeExtendedRef';
    type: Reference<UIComponentPartSubTypeExtended>
}

export const UIComponentPartSubTypeExtendedRef = 'UIComponentPartSubTypeExtendedRef';

export function isUIComponentPartSubTypeExtendedRef(item: unknown): item is UIComponentPartSubTypeExtendedRef {
    return reflection.isInstance(item, UIComponentPartSubTypeExtendedRef);
}

export interface UIComponentPartSubTypeOriginal extends AstNode {
    readonly $container: UIComponentPart;
    readonly $type: 'UIComponentPartSubTypeOriginal';
    type: 'Field_EditableSelection' | 'Field_Input' | 'Field_Output' | 'Field_Selection' | 'Other' | 'Slot_MenuGroup' | 'Slot_MenuOption' | 'Slot_MenuSeparator' | 'Slot_Other'
}

export const UIComponentPartSubTypeOriginal = 'UIComponentPartSubTypeOriginal';

export function isUIComponentPartSubTypeOriginal(item: unknown): item is UIComponentPartSubTypeOriginal {
    return reflection.isInstance(item, UIComponentPartSubTypeOriginal);
}

export interface UIComponentPartTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIComponentPartTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UIComponentPartTypeExtended = 'UIComponentPartTypeExtended';

export function isUIComponentPartTypeExtended(item: unknown): item is UIComponentPartTypeExtended {
    return reflection.isInstance(item, UIComponentPartTypeExtended);
}

export interface UIComponentPartTypeExtendedRef extends AstNode {
    readonly $container: UIComponentPart;
    readonly $type: 'UIComponentPartTypeExtendedRef';
    type: Reference<UIComponentPartTypeExtended>
}

export const UIComponentPartTypeExtendedRef = 'UIComponentPartTypeExtendedRef';

export function isUIComponentPartTypeExtendedRef(item: unknown): item is UIComponentPartTypeExtendedRef {
    return reflection.isInstance(item, UIComponentPartTypeExtendedRef);
}

export interface UIComponentPartTypeOriginal extends AstNode {
    readonly $container: UIComponentPart;
    readonly $type: 'UIComponentPartTypeOriginal';
    type: 'Field' | 'Other' | 'Slot'
}

export const UIComponentPartTypeOriginal = 'UIComponentPartTypeOriginal';

export function isUIComponentPartTypeOriginal(item: unknown): item is UIComponentPartTypeOriginal {
    return reflection.isInstance(item, UIComponentPartTypeOriginal);
}

export interface UIComponentRef extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIComponentRef';
    ref: Reference<UIComponent>
}

export const UIComponentRef = 'UIComponentRef';

export function isUIComponentRef(item: unknown): item is UIComponentRef {
    return reflection.isInstance(item, UIComponentRef);
}

export interface UIComponentSubTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIComponentSubTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UIComponentSubTypeExtended = 'UIComponentSubTypeExtended';

export function isUIComponentSubTypeExtended(item: unknown): item is UIComponentSubTypeExtended {
    return reflection.isInstance(item, UIComponentSubTypeExtended);
}

export interface UIComponentSubTypeExtendedRef extends AstNode {
    readonly $container: UIComponent;
    readonly $type: 'UIComponentSubTypeExtendedRef';
    type: Reference<UIComponentSubTypeExtended>
}

export const UIComponentSubTypeExtendedRef = 'UIComponentSubTypeExtendedRef';

export function isUIComponentSubTypeExtendedRef(item: unknown): item is UIComponentSubTypeExtendedRef {
    return reflection.isInstance(item, UIComponentSubTypeExtendedRef);
}

export interface UIComponentSubTypeOriginal extends AstNode {
    readonly $container: UIComponent;
    readonly $type: 'UIComponentSubTypeOriginal';
    type: 'Dialog_Error' | 'Dialog_Info' | 'Dialog_Message' | 'Dialog_Success' | 'Dialog_Warning' | 'Form_MasterDetail' | 'Form_Other' | 'Form_Simple' | 'List_MultiChoice' | 'List_Nested' | 'List_Table' | 'List_Tree' | 'Menu_Contextual' | 'Menu_Main' | 'Other'
}

export const UIComponentSubTypeOriginal = 'UIComponentSubTypeOriginal';

export function isUIComponentSubTypeOriginal(item: unknown): item is UIComponentSubTypeOriginal {
    return reflection.isInstance(item, UIComponentSubTypeOriginal);
}

export interface UIComponentTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIComponentTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UIComponentTypeExtended = 'UIComponentTypeExtended';

export function isUIComponentTypeExtended(item: unknown): item is UIComponentTypeExtended {
    return reflection.isInstance(item, UIComponentTypeExtended);
}

export interface UIComponentTypeExtendedRef extends AstNode {
    readonly $container: UIComponent;
    readonly $type: 'UIComponentTypeExtendedRef';
    type: Reference<UIComponentTypeExtended>
}

export const UIComponentTypeExtendedRef = 'UIComponentTypeExtendedRef';

export function isUIComponentTypeExtendedRef(item: unknown): item is UIComponentTypeExtendedRef {
    return reflection.isInstance(item, UIComponentTypeExtendedRef);
}

export interface UIComponentTypeOriginal extends AstNode {
    readonly $container: UIComponent;
    readonly $type: 'UIComponentTypeOriginal';
    type: 'Details' | 'Dialog' | 'Form' | 'List' | 'Menu'
}

export const UIComponentTypeOriginal = 'UIComponentTypeOriginal';

export function isUIComponentTypeOriginal(item: unknown): item is UIComponentTypeOriginal {
    return reflection.isInstance(item, UIComponentTypeOriginal);
}

export interface UIContainer extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIContainer';
    activationExpression?: UIExpression
    description?: string
    flowsTo?: RefFlowTo
    isDefault: boolean
    isLandmark: boolean
    isXOR: boolean
    name: string
    nameAlias?: string
    subType?: UIContainerSubType
    tags: Array<Tag>
    type: UIContainerType
    uiActions: Array<UIAction>
    uiElementEvents: Array<UIElementEvent>
    uiElements: Array<UIElement>
    uiParameters: Array<UIParameter>
}

export const UIContainer = 'UIContainer';

export function isUIContainer(item: unknown): item is UIContainer {
    return reflection.isInstance(item, UIContainer);
}

export interface UIContainerSubTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIContainerSubTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UIContainerSubTypeExtended = 'UIContainerSubTypeExtended';

export function isUIContainerSubTypeExtended(item: unknown): item is UIContainerSubTypeExtended {
    return reflection.isInstance(item, UIContainerSubTypeExtended);
}

export interface UIContainerSubTypeExtendedRef extends AstNode {
    readonly $container: UIContainer;
    readonly $type: 'UIContainerSubTypeExtendedRef';
    type: Reference<UIContainerSubTypeExtended>
}

export const UIContainerSubTypeExtendedRef = 'UIContainerSubTypeExtendedRef';

export function isUIContainerSubTypeExtendedRef(item: unknown): item is UIContainerSubTypeExtendedRef {
    return reflection.isInstance(item, UIContainerSubTypeExtendedRef);
}

export interface UIContainerSubTypeOriginal extends AstNode {
    readonly $container: UIContainer;
    readonly $type: 'UIContainerSubTypeOriginal';
    type: 'Menu_Contextual' | 'Menu_Main' | 'Other' | 'Window_Modal' | 'Window_Modeless'
}

export const UIContainerSubTypeOriginal = 'UIContainerSubTypeOriginal';

export function isUIContainerSubTypeOriginal(item: unknown): item is UIContainerSubTypeOriginal {
    return reflection.isInstance(item, UIContainerSubTypeOriginal);
}

export interface UIContainerTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIContainerTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UIContainerTypeExtended = 'UIContainerTypeExtended';

export function isUIContainerTypeExtended(item: unknown): item is UIContainerTypeExtended {
    return reflection.isInstance(item, UIContainerTypeExtended);
}

export interface UIContainerTypeExtendedRef extends AstNode {
    readonly $container: UIContainer;
    readonly $type: 'UIContainerTypeExtendedRef';
    type: Reference<UIContainerTypeExtended>
}

export const UIContainerTypeExtendedRef = 'UIContainerTypeExtendedRef';

export function isUIContainerTypeExtendedRef(item: unknown): item is UIContainerTypeExtendedRef {
    return reflection.isInstance(item, UIContainerTypeExtendedRef);
}

export interface UIContainerTypeOriginal extends AstNode {
    readonly $container: UIContainer;
    readonly $type: 'UIContainerTypeOriginal';
    type: 'Menu' | 'Other' | 'Window'
}

export const UIContainerTypeOriginal = 'UIContainerTypeOriginal';

export function isUIContainerTypeOriginal(item: unknown): item is UIContainerTypeOriginal {
    return reflection.isInstance(item, UIContainerTypeOriginal);
}

export interface UIContextExpression extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIContextExpression';
    validContext: Reference<Context>
}

export const UIContextExpression = 'UIContextExpression';

export function isUIContextExpression(item: unknown): item is UIContextExpression {
    return reflection.isInstance(item, UIContextExpression);
}

export interface UIElementEvent extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIElementEvent';
    activationExpression: Array<UIExpression>
    description?: string
    flowsTo?: RefFlowTo
    interactionFlowExpression: Array<UIExpression>
    name: string
    nameAlias?: string
    subType?: UIElementEventSubType
    tags: Array<Tag>
    type: UIElementEventType
    uiParameters: Array<UIParameter>
}

export const UIElementEvent = 'UIElementEvent';

export function isUIElementEvent(item: unknown): item is UIElementEvent {
    return reflection.isInstance(item, UIElementEvent);
}

export interface UIElementEventSubTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIElementEventSubTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UIElementEventSubTypeExtended = 'UIElementEventSubTypeExtended';

export function isUIElementEventSubTypeExtended(item: unknown): item is UIElementEventSubTypeExtended {
    return reflection.isInstance(item, UIElementEventSubTypeExtended);
}

export interface UIElementEventSubTypeExtendedRef extends AstNode {
    readonly $container: UIElementEvent;
    readonly $type: 'UIElementEventSubTypeExtendedRef';
    type: Reference<UIElementEventSubTypeExtended>
}

export const UIElementEventSubTypeExtendedRef = 'UIElementEventSubTypeExtendedRef';

export function isUIElementEventSubTypeExtendedRef(item: unknown): item is UIElementEventSubTypeExtendedRef {
    return reflection.isInstance(item, UIElementEventSubTypeExtendedRef);
}

export interface UIElementEventSubTypeOriginal extends AstNode {
    readonly $container: UIElementEvent;
    readonly $type: 'UIElementEventSubTypeOriginal';
    type: 'Other' | 'Submit_Back' | 'Submit_Cancel' | 'Submit_Create' | 'Submit_Delete' | 'Submit_Ok' | 'Submit_Read' | 'Submit_Up' | 'Submit_Update'
}

export const UIElementEventSubTypeOriginal = 'UIElementEventSubTypeOriginal';

export function isUIElementEventSubTypeOriginal(item: unknown): item is UIElementEventSubTypeOriginal {
    return reflection.isInstance(item, UIElementEventSubTypeOriginal);
}

export interface UIElementEventTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIElementEventTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UIElementEventTypeExtended = 'UIElementEventTypeExtended';

export function isUIElementEventTypeExtended(item: unknown): item is UIElementEventTypeExtended {
    return reflection.isInstance(item, UIElementEventTypeExtended);
}

export interface UIElementEventTypeExtendedRef extends AstNode {
    readonly $container: UIElementEvent;
    readonly $type: 'UIElementEventTypeExtendedRef';
    type: Reference<UIElementEventTypeExtended>
}

export const UIElementEventTypeExtendedRef = 'UIElementEventTypeExtendedRef';

export function isUIElementEventTypeExtendedRef(item: unknown): item is UIElementEventTypeExtendedRef {
    return reflection.isInstance(item, UIElementEventTypeExtendedRef);
}

export interface UIElementEventTypeOriginal extends AstNode {
    readonly $container: UIElementEvent;
    readonly $type: 'UIElementEventTypeOriginal';
    type: 'Other' | 'Select' | 'Submit'
}

export const UIElementEventTypeOriginal = 'UIElementEventTypeOriginal';

export function isUIElementEventTypeOriginal(item: unknown): item is UIElementEventTypeOriginal {
    return reflection.isInstance(item, UIElementEventTypeOriginal);
}

export interface UIParameter extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIParameter';
    name: string
    nameAlias?: string
}

export const UIParameter = 'UIParameter';

export function isUIParameter(item: unknown): item is UIParameter {
    return reflection.isInstance(item, UIParameter);
}

export interface UIParameterBinding extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIParameterBinding';
    source: UIParameter
    target: UIParameter
}

export const UIParameterBinding = 'UIParameterBinding';

export function isUIParameterBinding(item: unknown): item is UIParameterBinding {
    return reflection.isInstance(item, UIParameterBinding);
}

export interface UIParameterBindingGroup extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIParameterBindingGroup';
    uiParameterBindings: Array<UIParameterBinding>
}

export const UIParameterBindingGroup = 'UIParameterBindingGroup';

export function isUIParameterBindingGroup(item: unknown): item is UIParameterBindingGroup {
    return reflection.isInstance(item, UIParameterBindingGroup);
}

export interface UIPortDefinition extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIPortDefinition';
    description?: string
    name: string
    nameAlias?: string
    tags: Array<Tag>
    type: UIPortDefinitionType
    uiParameters: Array<UIParameter>
}

export const UIPortDefinition = 'UIPortDefinition';

export function isUIPortDefinition(item: unknown): item is UIPortDefinition {
    return reflection.isInstance(item, UIPortDefinition);
}

export interface UIPortDefinitionTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIPortDefinitionTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UIPortDefinitionTypeExtended = 'UIPortDefinitionTypeExtended';

export function isUIPortDefinitionTypeExtended(item: unknown): item is UIPortDefinitionTypeExtended {
    return reflection.isInstance(item, UIPortDefinitionTypeExtended);
}

export interface UIPortDefinitionTypeExtendedRef extends AstNode {
    readonly $container: UIPortDefinition;
    readonly $type: 'UIPortDefinitionTypeExtendedRef';
    type: Reference<UIPortDefinitionTypeExtended>
}

export const UIPortDefinitionTypeExtendedRef = 'UIPortDefinitionTypeExtendedRef';

export function isUIPortDefinitionTypeExtendedRef(item: unknown): item is UIPortDefinitionTypeExtendedRef {
    return reflection.isInstance(item, UIPortDefinitionTypeExtendedRef);
}

export interface UIPortDefinitionTypeOriginal extends AstNode {
    readonly $container: UIPortDefinition;
    readonly $type: 'UIPortDefinitionTypeOriginal';
    type: 'NotSpecified'
}

export const UIPortDefinitionTypeOriginal = 'UIPortDefinitionTypeOriginal';

export function isUIPortDefinitionTypeOriginal(item: unknown): item is UIPortDefinitionTypeOriginal {
    return reflection.isInstance(item, UIPortDefinitionTypeOriginal);
}

export interface UISimpleExpression extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UISimpleExpression';
    body?: string
    expression: string
    language?: string
}

export const UISimpleExpression = 'UISimpleExpression';

export function isUISimpleExpression(item: unknown): item is UISimpleExpression {
    return reflection.isInstance(item, UISimpleExpression);
}

export interface UISystemEvent extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UISystemEvent';
    activationExpression?: UIExpression
    description?: string
    flowsTo?: RefFlowTo
    interactionFlowExpression?: UIExpression
    name: string
    nameAlias?: string
    tags: Array<Tag>
    triggeringExpressions: Array<UIExpression>
    type: UISystemEventType
    uiParameters: Array<UIParameter>
}

export const UISystemEvent = 'UISystemEvent';

export function isUISystemEvent(item: unknown): item is UISystemEvent {
    return reflection.isInstance(item, UISystemEvent);
}

export interface UISystemEventTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UISystemEventTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UISystemEventTypeExtended = 'UISystemEventTypeExtended';

export function isUISystemEventTypeExtended(item: unknown): item is UISystemEventTypeExtended {
    return reflection.isInstance(item, UISystemEventTypeExtended);
}

export interface UISystemEventTypeExtendedRef extends AstNode {
    readonly $container: UISystemEvent;
    readonly $type: 'UISystemEventTypeExtendedRef';
    type: Reference<UISystemEventTypeExtended>
}

export const UISystemEventTypeExtendedRef = 'UISystemEventTypeExtendedRef';

export function isUISystemEventTypeExtendedRef(item: unknown): item is UISystemEventTypeExtendedRef {
    return reflection.isInstance(item, UISystemEventTypeExtendedRef);
}

export interface UISystemEventTypeOriginal extends AstNode {
    readonly $container: UISystemEvent;
    readonly $type: 'UISystemEventTypeOriginal';
    type: 'Other' | 'SystemAlert' | 'SystemMessage' | 'Time'
}

export const UISystemEventTypeOriginal = 'UISystemEventTypeOriginal';

export function isUISystemEventTypeOriginal(item: unknown): item is UISystemEventTypeOriginal {
    return reflection.isInstance(item, UISystemEventTypeOriginal);
}

export interface UIThrowingEvent extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIThrowingEvent';
    description?: string
    flowsTo?: RefFlowTo
    name: string
    nameAlias?: string
    tags: Array<Tag>
    type: UIThrowingEventType
    uiActivationExpression?: UIExpression
    uiInteractionFlowExpression?: UIExpression
    uiParameters: Array<UIParameter>
}

export const UIThrowingEvent = 'UIThrowingEvent';

export function isUIThrowingEvent(item: unknown): item is UIThrowingEvent {
    return reflection.isInstance(item, UIThrowingEvent);
}

export interface UIThrowingEventTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIThrowingEventTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UIThrowingEventTypeExtended = 'UIThrowingEventTypeExtended';

export function isUIThrowingEventTypeExtended(item: unknown): item is UIThrowingEventTypeExtended {
    return reflection.isInstance(item, UIThrowingEventTypeExtended);
}

export interface UIThrowingEventTypeExtendedRef extends AstNode {
    readonly $container: UIThrowingEvent;
    readonly $type: 'UIThrowingEventTypeExtendedRef';
    type: Reference<UIThrowingEventTypeExtended>
}

export const UIThrowingEventTypeExtendedRef = 'UIThrowingEventTypeExtendedRef';

export function isUIThrowingEventTypeExtendedRef(item: unknown): item is UIThrowingEventTypeExtendedRef {
    return reflection.isInstance(item, UIThrowingEventTypeExtendedRef);
}

export interface UIThrowingEventTypeOriginal extends AstNode {
    readonly $container: UIThrowingEvent;
    readonly $type: 'UIThrowingEventTypeOriginal';
    type: 'Jump' | 'SetContext'
}

export const UIThrowingEventTypeOriginal = 'UIThrowingEventTypeOriginal';

export function isUIThrowingEventTypeOriginal(item: unknown): item is UIThrowingEventTypeOriginal {
    return reflection.isInstance(item, UIThrowingEventTypeOriginal);
}

export interface UIWireframeTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UIWireframeTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UIWireframeTypeExtended = 'UIWireframeTypeExtended';

export function isUIWireframeTypeExtended(item: unknown): item is UIWireframeTypeExtended {
    return reflection.isInstance(item, UIWireframeTypeExtended);
}

export interface UIWireframeTypeExtendedRef extends AstNode {
    readonly $container: UIComponentPart;
    readonly $type: 'UIWireframeTypeExtendedRef';
    type: Reference<UIWireframeTypeExtended>
}

export const UIWireframeTypeExtendedRef = 'UIWireframeTypeExtendedRef';

export function isUIWireframeTypeExtendedRef(item: unknown): item is UIWireframeTypeExtendedRef {
    return reflection.isInstance(item, UIWireframeTypeExtendedRef);
}

export interface UIWireframeTypeOriginal extends AstNode {
    readonly $container: UIComponentPart;
    readonly $type: 'UIWireframeTypeOriginal';
    type: 'Other' | 'WFC_AudioPlayer' | 'WFC_Button' | 'WFC_Calendar' | 'WFC_CheckBox' | 'WFC_ComboBox' | 'WFC_Header' | 'WFC_Hyperlink' | 'WFC_Image' | 'WFC_Label' | 'WFC_List' | 'WFC_Paragraph' | 'WFC_ProgressBar' | 'WFC_RadioButton' | 'WFC_Tab' | 'WFC_Table' | 'WFC_Text' | 'WFC_VideoPlayer'
}

export const UIWireframeTypeOriginal = 'UIWireframeTypeOriginal';

export function isUIWireframeTypeOriginal(item: unknown): item is UIWireframeTypeOriginal {
    return reflection.isInstance(item, UIWireframeTypeOriginal);
}

export interface UpdateField extends AstNode {
    readonly $container: UpdateFields;
    readonly $type: 'UpdateField';
    nameField: string
    valueField: string
}

export const UpdateField = 'UpdateField';

export function isUpdateField(item: unknown): item is UpdateField {
    return reflection.isInstance(item, UpdateField);
}

export interface UpdateFields extends AstNode {
    readonly $container: IncludeElement;
    readonly $type: 'UpdateFields';
    updateFields: Array<UpdateField>
}

export const UpdateFields = 'UpdateFields';

export function isUpdateFields(item: unknown): item is UpdateFields {
    return reflection.isInstance(item, UpdateFields);
}

export interface UseCase extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UseCase';
    actions?: UCActions
    actorInitiates?: Reference<ContextDimensionActor>
    actorParticipates: Array<RefActor>
    dataEntity?: Reference<DataEntityGeneric>
    description?: string
    extends: Array<UCExtends>
    extensionPoints?: UCExtensionPoints
    includes?: UCIncludes
    isAbstract: boolean
    isConcrete: boolean
    isNegative: boolean
    isPositive: boolean
    isProblem: boolean
    isSolution: boolean
    name: string
    nameAlias?: string
    postcondition?: string
    precondition?: string
    tags: Array<Tag>
    type: UseCaseType
}

export const UseCase = 'UseCase';

export function isUseCase(item: unknown): item is UseCase {
    return reflection.isInstance(item, UseCase);
}

export interface UseCaseTypeExtended extends AstNode {
    readonly $container: RefFlowTo | System | UIAction | UIActionEvent | UIComponent | UIComponentPart | UIContainer | UIElementEvent | UIParameterBinding | UIParameterBindingGroup | UIPortDefinition | UISystemEvent | UIThrowingEvent;
    readonly $type: 'UseCaseTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UseCaseTypeExtended = 'UseCaseTypeExtended';

export function isUseCaseTypeExtended(item: unknown): item is UseCaseTypeExtended {
    return reflection.isInstance(item, UseCaseTypeExtended);
}

export interface UseCaseTypeExtendedRef extends AstNode {
    readonly $container: UseCase;
    readonly $type: 'UseCaseTypeExtendedRef';
    type: Reference<UseCaseTypeExtended>
}

export const UseCaseTypeExtendedRef = 'UseCaseTypeExtendedRef';

export function isUseCaseTypeExtendedRef(item: unknown): item is UseCaseTypeExtendedRef {
    return reflection.isInstance(item, UseCaseTypeExtendedRef);
}

export interface UseCaseTypeOriginal extends AstNode {
    readonly $container: UseCase;
    readonly $type: 'UseCaseTypeOriginal';
    type: 'EntitiesBrowse' | 'EntitiesDashboard' | 'EntitiesInteropExport' | 'EntitiesInteropImport' | 'EntitiesInteropSendMessage' | 'EntitiesInteropServiceInvocation' | 'EntitiesInteropSync' | 'EntitiesManage' | 'EntitiesMapInteract' | 'EntitiesMapShow' | 'EntitiesOther' | 'EntitiesReport' | 'EntitiesSearch' | 'EntityCreate' | 'EntityDashboard' | 'EntityDelete' | 'EntityOther' | 'EntityRead' | 'EntityReport' | 'EntityUpdate' | 'Other'
}

export const UseCaseTypeOriginal = 'UseCaseTypeOriginal';

export function isUseCaseTypeOriginal(item: unknown): item is UseCaseTypeOriginal {
    return reflection.isInstance(item, UseCaseTypeOriginal);
}

export interface UserActivityStatusTypeExtended extends AstNode {
    readonly $type: 'UserActivityStatusTypeExtended';
    description?: string
    name: string
    nameAlias?: string
}

export const UserActivityStatusTypeExtended = 'UserActivityStatusTypeExtended';

export function isUserActivityStatusTypeExtended(item: unknown): item is UserActivityStatusTypeExtended {
    return reflection.isInstance(item, UserActivityStatusTypeExtended);
}

export interface UserActivityStatusTypeExtendedRef extends AstNode {
    readonly $type: 'UserActivityStatusTypeExtendedRef';
    type: Reference<UserActivityStatusTypeExtended>
}

export const UserActivityStatusTypeExtendedRef = 'UserActivityStatusTypeExtendedRef';

export function isUserActivityStatusTypeExtendedRef(item: unknown): item is UserActivityStatusTypeExtendedRef {
    return reflection.isInstance(item, UserActivityStatusTypeExtendedRef);
}

export interface UserActivityStatusTypeOriginal extends AstNode {
    readonly $type: 'UserActivityStatusTypeOriginal';
    type: 'Cycling' | 'In-vehicle' | 'NotDefined' | 'Running' | 'Still' | 'Walking'
}

export const UserActivityStatusTypeOriginal = 'UserActivityStatusTypeOriginal';

export function isUserActivityStatusTypeOriginal(item: unknown): item is UserActivityStatusTypeOriginal {
    return reflection.isInstance(item, UserActivityStatusTypeOriginal);
}

export interface Variable extends AstNode {
    readonly $container: VariableReference;
    readonly $type: 'Variable';
    value: Reference<DataAttribute>
}

export const Variable = 'Variable';

export function isVariable(item: unknown): item is Variable {
    return reflection.isInstance(item, Variable);
}

export interface _Date extends AttributeValue {
    readonly $container: DataAttributeTableRow | _Date;
    readonly $type: '_Date';
    day: number
    month: Month
    year: number
}

export const _Date = '_Date';
export const DoubleOrInt = 'DoubleOrInt';
export const Percentage = 'Percentage';

export function is_Date(item: unknown): item is _Date {
    return reflection.isInstance(item, _Date);
}

export interface Month extends AttributeValue {
    readonly $container: DataAttributeTableRow | _Date;
    readonly $type: 'Month';
    type: 'Apr' | 'Aug' | 'Dec' | 'Feb' | 'Jan' | 'Jul' | 'Jun' | 'Mar' | 'May' | 'Nov' | 'Oct' | 'Sep'
}

export const Month = 'Month';

export function isMonth(item: unknown): item is Month {
    return reflection.isInstance(item, Month);
}

export interface DataAttributeTypeExtendedRef extends DataAttributeType {
    readonly $container: DataAttribute | UIComponentPart;
    readonly $type: 'DataAttributeTypeExtendedRef';
    type: Reference<DataAttributeTypeExtended>
}

export const DataAttributeTypeExtendedRef = 'DataAttributeTypeExtendedRef';

export function isDataAttributeTypeExtendedRef(item: unknown): item is DataAttributeTypeExtendedRef {
    return reflection.isInstance(item, DataAttributeTypeExtendedRef);
}

export interface DataAttributeTypeOriginal extends DataAttributeType {
    readonly $container: DataAttribute | UIComponentPart;
    readonly $type: 'DataAttributeTypeOriginal';
    type: 'Binary' | 'Bit' | 'Boolean' | 'Currency' | 'Date' | 'Datetime' | 'Decimal' | 'Double' | 'Email' | 'File' | 'FilePath' | 'Image' | 'Integer' | 'Regex' | 'String' | 'Text' | 'Time' | 'URL' | 'XML'
}

export const DataAttributeTypeOriginal = 'DataAttributeTypeOriginal';

export function isDataAttributeTypeOriginal(item: unknown): item is DataAttributeTypeOriginal {
    return reflection.isInstance(item, DataAttributeTypeOriginal);
}

export interface DataEnumerationRef extends DataAttributeType {
    readonly $container: DataAttribute | UIComponentPart;
    readonly $type: 'DataEnumerationRef';
    type: Reference<DataEnumeration>
}

export const DataEnumerationRef = 'DataEnumerationRef';

export function isDataEnumerationRef(item: unknown): item is DataEnumerationRef {
    return reflection.isInstance(item, DataEnumerationRef);
}

export interface FunctionReference extends TernaryExpression {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'FunctionReference';
    ref: _Function
}

export const FunctionReference = 'FunctionReference';

export function isFunctionReference(item: unknown): item is FunctionReference {
    return reflection.isInstance(item, FunctionReference);
}

export interface VariableReference extends TernaryExpression {
    readonly $container: ArithmeticFormula | ArithmeticSigned | BooleanExpression | BooleanNegation | Comparison | DataAttributeConstraint | Equals | Membership | Minus | MultiOrDivOrMod | Plus | TernaryExpression | UIComponentPart | _Function;
    readonly $type: 'VariableReference';
    ref: Variable
}

export const VariableReference = 'VariableReference';

export function isVariableReference(item: unknown): item is VariableReference {
    return reflection.isInstance(item, VariableReference);
}

export interface AslAstType {
    ActionType: ActionType
    ActionTypeExtended: ActionTypeExtended
    ActionTypeExtendedRef: ActionTypeExtendedRef
    ActionTypeOriginal: ActionTypeOriginal
    ActiveElement: ActiveElement
    ActiveEvent: ActiveEvent
    ActiveEventType: ActiveEventType
    ActiveEventTypeExtended: ActiveEventTypeExtended
    ActiveEventTypeExtendedRef: ActiveEventTypeExtendedRef
    ActiveEventTypeOriginal: ActiveEventTypeOriginal
    ActiveFlow: ActiveFlow
    ActiveFlowType: ActiveFlowType
    ActiveFlowTypeExtended: ActiveFlowTypeExtended
    ActiveFlowTypeExtendedRef: ActiveFlowTypeExtendedRef
    ActiveFlowTypeOriginal: ActiveFlowTypeOriginal
    ActiveStructureElement: ActiveStructureElement
    ActiveTask: ActiveTask
    ActiveTaskType: ActiveTaskType
    ActiveTaskTypeExtended: ActiveTaskTypeExtended
    ActiveTaskTypeExtendedRef: ActiveTaskTypeExtendedRef
    ActiveTaskTypeOriginal: ActiveTaskTypeOriginal
    ActorType: ActorType
    ActorTypeExtended: ActorTypeExtended
    ActorTypeExtendedRef: ActorTypeExtendedRef
    ActorTypeOriginal: ActorTypeOriginal
    ArithmeticFormula: ArithmeticFormula
    ArithmeticSigned: ArithmeticSigned
    AttributeValue: AttributeValue
    BehaviorElement: BehaviorElement
    BooleanExpression: BooleanExpression
    BooleanLiteral: BooleanLiteral
    BooleanNegation: BooleanNegation
    Check: Check
    ChildDataEntity: ChildDataEntity
    Comparison: Comparison
    Context: Context
    ContextDimension: ContextDimension
    ContextDimensionActor: ContextDimensionActor
    ContextDimensionDevice: ContextDimensionDevice
    ContextDimensionDeviceType: ContextDimensionDeviceType
    ContextDimensionDeviceTypeExtended: ContextDimensionDeviceTypeExtended
    ContextDimensionDeviceTypeExtendedRef: ContextDimensionDeviceTypeExtendedRef
    ContextDimensionDeviceTypeOriginal: ContextDimensionDeviceTypeOriginal
    ContextDimensionSensor: ContextDimensionSensor
    ContextDimensionSensorType: ContextDimensionSensorType
    ContextDimensionSensorTypeExtended: ContextDimensionSensorTypeExtended
    ContextDimensionSensorTypeExtendedRef: ContextDimensionSensorTypeExtendedRef
    ContextDimensionSensorTypeOriginal: ContextDimensionSensorTypeOriginal
    ContextElement: ContextElement
    ContextVariable: ContextVariable
    Data: Data
    DataAttribute: DataAttribute
    DataAttributeConstraint: DataAttributeConstraint
    DataAttributeRefs: DataAttributeRefs
    DataAttributeRefsList: DataAttributeRefsList
    DataAttributeTableRow: DataAttributeTableRow
    DataAttributeType: DataAttributeType
    DataAttributeTypeExtended: DataAttributeTypeExtended
    DataAttributeTypeExtendedRef: DataAttributeTypeExtendedRef
    DataAttributeTypeOriginal: DataAttributeTypeOriginal
    DataAttributeValues: DataAttributeValues
    DataEntity: DataEntity
    DataEntityCluster: DataEntityCluster
    DataEntityClusterType: DataEntityClusterType
    DataEntityClusterTypeExtended: DataEntityClusterTypeExtended
    DataEntityClusterTypeExtendedRef: DataEntityClusterTypeExtendedRef
    DataEntityClusterTypeOriginal: DataEntityClusterTypeOriginal
    DataEntityConstraint: DataEntityConstraint
    DataEntityGeneric: DataEntityGeneric
    DataEntitySubType: DataEntitySubType
    DataEntitySubTypeExtended: DataEntitySubTypeExtended
    DataEntitySubTypeExtendedRef: DataEntitySubTypeExtendedRef
    DataEntitySubTypeOriginal: DataEntitySubTypeOriginal
    DataEntityType: DataEntityType
    DataEntityTypeExtended: DataEntityTypeExtended
    DataEntityTypeExtendedRef: DataEntityTypeExtendedRef
    DataEntityTypeOriginal: DataEntityTypeOriginal
    DataEnumeration: DataEnumeration
    DataEnumerationElement: DataEnumerationElement
    DataEnumerationRef: DataEnumerationRef
    DetailsFormula: DetailsFormula
    DetailsFormulaOp: DetailsFormulaOp
    Equals: Equals
    Expression: Expression
    FlowElement: FlowElement
    ForeignKey: ForeignKey
    ForeignKeyOnDeleteType: ForeignKeyOnDeleteType
    ForeignKeyOnDeleteTypeExtended: ForeignKeyOnDeleteTypeExtended
    ForeignKeyOnDeleteTypeExtendedRef: ForeignKeyOnDeleteTypeExtendedRef
    ForeignKeyOnDeleteTypeOriginal: ForeignKeyOnDeleteTypeOriginal
    Formula: Formula
    FunctionReference: FunctionReference
    Import: Import
    IncludeAll: IncludeAll
    IncludeElement: IncludeElement
    IncludeElementGeneric: IncludeElementGeneric
    IncludeSystemElementType: IncludeSystemElementType
    IntegerLiteral: IntegerLiteral
    LiteralExpression: LiteralExpression
    ManyToMany: ManyToMany
    Membership: Membership
    MetricType: MetricType
    MetricTypeExtended: MetricTypeExtended
    MetricTypeExtendedRef: MetricTypeExtendedRef
    MetricTypeOriginal: MetricTypeOriginal
    Minus: Minus
    Model: Model
    Month: Month
    MultiOrDivOrMod: MultiOrDivOrMod
    Multiplicity: Multiplicity
    NetworkConnectivityType: NetworkConnectivityType
    NetworkConnectivityTypeExtended: NetworkConnectivityTypeExtended
    NetworkConnectivityTypeExtendedRef: NetworkConnectivityTypeExtendedRef
    NetworkConnectivityTypeOriginal: NetworkConnectivityTypeOriginal
    NullLiteral: NullLiteral
    OtherElement: OtherElement
    PackageAbstract: PackageAbstract
    PackageSystem: PackageSystem
    PassiveStructureElement: PassiveStructureElement
    Plus: Plus
    RefActiveElement: RefActiveElement
    RefActor: RefActor
    RefDataEntity: RefDataEntity
    RefFlowTo: RefFlowTo
    RefSystems: RefSystems
    RefUC: RefUC
    ScreenSizeCategoryType: ScreenSizeCategoryType
    ScreenSizeCategoryTypeExtended: ScreenSizeCategoryTypeExtended
    ScreenSizeCategoryTypeExtendedRef: ScreenSizeCategoryTypeExtendedRef
    ScreenSizeCategoryTypeOriginal: ScreenSizeCategoryTypeOriginal
    SensorStatusType: SensorStatusType
    SensorStatusTypeExtended: SensorStatusTypeExtended
    SensorStatusTypeExtendedRef: SensorStatusTypeExtendedRef
    SensorStatusTypeOriginal: SensorStatusTypeOriginal
    Stereotype: Stereotype
    StereotypeType: StereotypeType
    StereotypeTypeExtended: StereotypeTypeExtended
    StereotypeTypeExtendedRef: StereotypeTypeExtendedRef
    StereotypeTypeOriginal: StereotypeTypeOriginal
    StringLiteral: StringLiteral
    StructureElement: StructureElement
    System: System
    SystemConcept: SystemConcept
    SystemElement: SystemElement
    SystemSubType: SystemSubType
    SystemSubTypeExtended: SystemSubTypeExtended
    SystemSubTypeExtendedRef: SystemSubTypeExtendedRef
    SystemSubTypeOriginal: SystemSubTypeOriginal
    SystemType: SystemType
    SystemTypeExtended: SystemTypeExtended
    SystemTypeExtendedRef: SystemTypeExtendedRef
    SystemTypeOriginal: SystemTypeOriginal
    Tag: Tag
    TernaryExpression: TernaryExpression
    TypeExtended: TypeExtended
    UCActions: UCActions
    UCExtends: UCExtends
    UCExtensionPoint: UCExtensionPoint
    UCExtensionPoints: UCExtensionPoints
    UCIncludes: UCIncludes
    UIAction: UIAction
    UIActionEvent: UIActionEvent
    UIActionEventType: UIActionEventType
    UIActionEventTypeExtended: UIActionEventTypeExtended
    UIActionEventTypeExtendedRef: UIActionEventTypeExtendedRef
    UIActionEventTypeOriginal: UIActionEventTypeOriginal
    UIActionType: UIActionType
    UIActionTypeExtended: UIActionTypeExtended
    UIActionTypeExtendedRef: UIActionTypeExtendedRef
    UIActionTypeOriginal: UIActionTypeOriginal
    UICatchingEvent: UICatchingEvent
    UIComponent: UIComponent
    UIComponentPart: UIComponentPart
    UIComponentPartSubType: UIComponentPartSubType
    UIComponentPartSubTypeExtended: UIComponentPartSubTypeExtended
    UIComponentPartSubTypeExtendedRef: UIComponentPartSubTypeExtendedRef
    UIComponentPartSubTypeOriginal: UIComponentPartSubTypeOriginal
    UIComponentPartType: UIComponentPartType
    UIComponentPartTypeExtended: UIComponentPartTypeExtended
    UIComponentPartTypeExtendedRef: UIComponentPartTypeExtendedRef
    UIComponentPartTypeOriginal: UIComponentPartTypeOriginal
    UIComponentRef: UIComponentRef
    UIComponentSubType: UIComponentSubType
    UIComponentSubTypeExtended: UIComponentSubTypeExtended
    UIComponentSubTypeExtendedRef: UIComponentSubTypeExtendedRef
    UIComponentSubTypeOriginal: UIComponentSubTypeOriginal
    UIComponentType: UIComponentType
    UIComponentTypeExtended: UIComponentTypeExtended
    UIComponentTypeExtendedRef: UIComponentTypeExtendedRef
    UIComponentTypeOriginal: UIComponentTypeOriginal
    UIContainer: UIContainer
    UIContainerSubType: UIContainerSubType
    UIContainerSubTypeExtended: UIContainerSubTypeExtended
    UIContainerSubTypeExtendedRef: UIContainerSubTypeExtendedRef
    UIContainerSubTypeOriginal: UIContainerSubTypeOriginal
    UIContainerType: UIContainerType
    UIContainerTypeExtended: UIContainerTypeExtended
    UIContainerTypeExtendedRef: UIContainerTypeExtendedRef
    UIContainerTypeOriginal: UIContainerTypeOriginal
    UIContextExpression: UIContextExpression
    UIElement: UIElement
    UIElementEvent: UIElementEvent
    UIElementEventSubType: UIElementEventSubType
    UIElementEventSubTypeExtended: UIElementEventSubTypeExtended
    UIElementEventSubTypeExtendedRef: UIElementEventSubTypeExtendedRef
    UIElementEventSubTypeOriginal: UIElementEventSubTypeOriginal
    UIElementEventType: UIElementEventType
    UIElementEventTypeExtended: UIElementEventTypeExtended
    UIElementEventTypeExtendedRef: UIElementEventTypeExtendedRef
    UIElementEventTypeOriginal: UIElementEventTypeOriginal
    UIEvent: UIEvent
    UIExpression: UIExpression
    UIModelElement: UIModelElement
    UIParameter: UIParameter
    UIParameterBinding: UIParameterBinding
    UIParameterBindingGroup: UIParameterBindingGroup
    UIPortDefinition: UIPortDefinition
    UIPortDefinitionType: UIPortDefinitionType
    UIPortDefinitionTypeExtended: UIPortDefinitionTypeExtended
    UIPortDefinitionTypeExtendedRef: UIPortDefinitionTypeExtendedRef
    UIPortDefinitionTypeOriginal: UIPortDefinitionTypeOriginal
    UISimpleExpression: UISimpleExpression
    UISystemEvent: UISystemEvent
    UISystemEventType: UISystemEventType
    UISystemEventTypeExtended: UISystemEventTypeExtended
    UISystemEventTypeExtendedRef: UISystemEventTypeExtendedRef
    UISystemEventTypeOriginal: UISystemEventTypeOriginal
    UIThrowingEvent: UIThrowingEvent
    UIThrowingEventType: UIThrowingEventType
    UIThrowingEventTypeExtended: UIThrowingEventTypeExtended
    UIThrowingEventTypeExtendedRef: UIThrowingEventTypeExtendedRef
    UIThrowingEventTypeOriginal: UIThrowingEventTypeOriginal
    UIWireframeType: UIWireframeType
    UIWireframeTypeExtended: UIWireframeTypeExtended
    UIWireframeTypeExtendedRef: UIWireframeTypeExtendedRef
    UIWireframeTypeOriginal: UIWireframeTypeOriginal
    UpdateField: UpdateField
    UpdateFields: UpdateFields
    UseCase: UseCase
    UseCaseType: UseCaseType
    UseCaseTypeExtended: UseCaseTypeExtended
    UseCaseTypeExtendedRef: UseCaseTypeExtendedRef
    UseCaseTypeOriginal: UseCaseTypeOriginal
    UserActivityStatusType: UserActivityStatusType
    UserActivityStatusTypeExtended: UserActivityStatusTypeExtended
    UserActivityStatusTypeExtendedRef: UserActivityStatusTypeExtendedRef
    UserActivityStatusTypeOriginal: UserActivityStatusTypeOriginal
    Variable: Variable
    VariableReference: VariableReference
    _Date: _Date
    _Function: _Function
}

export class AslAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['ActionType', 'ActionTypeExtended', 'ActionTypeExtendedRef', 'ActionTypeOriginal', 'ActiveElement', 'ActiveEvent', 'ActiveEventType', 'ActiveEventTypeExtended', 'ActiveEventTypeExtendedRef', 'ActiveEventTypeOriginal', 'ActiveFlow', 'ActiveFlowType', 'ActiveFlowTypeExtended', 'ActiveFlowTypeExtendedRef', 'ActiveFlowTypeOriginal', 'ActiveStructureElement', 'ActiveTask', 'ActiveTaskType', 'ActiveTaskTypeExtended', 'ActiveTaskTypeExtendedRef', 'ActiveTaskTypeOriginal', 'ActorType', 'ActorTypeExtended', 'ActorTypeExtendedRef', 'ActorTypeOriginal', 'ArithmeticFormula', 'ArithmeticSigned', 'AttributeValue', 'BehaviorElement', 'BooleanExpression', 'BooleanLiteral', 'BooleanNegation', 'Check', 'ChildDataEntity', 'Comparison', 'Context', 'ContextDimension', 'ContextDimensionActor', 'ContextDimensionDevice', 'ContextDimensionDeviceType', 'ContextDimensionDeviceTypeExtended', 'ContextDimensionDeviceTypeExtendedRef', 'ContextDimensionDeviceTypeOriginal', 'ContextDimensionSensor', 'ContextDimensionSensorType', 'ContextDimensionSensorTypeExtended', 'ContextDimensionSensorTypeExtendedRef', 'ContextDimensionSensorTypeOriginal', 'ContextElement', 'ContextVariable', 'Data', 'DataAttribute', 'DataAttributeConstraint', 'DataAttributeRefs', 'DataAttributeRefsList', 'DataAttributeTableRow', 'DataAttributeType', 'DataAttributeTypeExtended', 'DataAttributeTypeExtendedRef', 'DataAttributeTypeOriginal', 'DataAttributeValues', 'DataEntity', 'DataEntityCluster', 'DataEntityClusterType', 'DataEntityClusterTypeExtended', 'DataEntityClusterTypeExtendedRef', 'DataEntityClusterTypeOriginal', 'DataEntityConstraint', 'DataEntityGeneric', 'DataEntitySubType', 'DataEntitySubTypeExtended', 'DataEntitySubTypeExtendedRef', 'DataEntitySubTypeOriginal', 'DataEntityType', 'DataEntityTypeExtended', 'DataEntityTypeExtendedRef', 'DataEntityTypeOriginal', 'DataEnumeration', 'DataEnumerationElement', 'DataEnumerationRef', 'DetailsFormula', 'DetailsFormulaOp', 'Equals', 'Expression', 'FlowElement', 'ForeignKey', 'ForeignKeyOnDeleteType', 'ForeignKeyOnDeleteTypeExtended', 'ForeignKeyOnDeleteTypeExtendedRef', 'ForeignKeyOnDeleteTypeOriginal', 'Formula', 'FunctionReference', 'Import', 'IncludeAll', 'IncludeElement', 'IncludeElementGeneric', 'IncludeSystemElementType', 'IntegerLiteral', 'LiteralExpression', 'ManyToMany', 'Membership', 'MetricType', 'MetricTypeExtended', 'MetricTypeExtendedRef', 'MetricTypeOriginal', 'Minus', 'Model', 'Month', 'MultiOrDivOrMod', 'Multiplicity', 'NetworkConnectivityType', 'NetworkConnectivityTypeExtended', 'NetworkConnectivityTypeExtendedRef', 'NetworkConnectivityTypeOriginal', 'NullLiteral', 'OtherElement', 'PackageAbstract', 'PackageSystem', 'PassiveStructureElement', 'Plus', 'RefActiveElement', 'RefActor', 'RefDataEntity', 'RefFlowTo', 'RefSystems', 'RefUC', 'ScreenSizeCategoryType', 'ScreenSizeCategoryTypeExtended', 'ScreenSizeCategoryTypeExtendedRef', 'ScreenSizeCategoryTypeOriginal', 'SensorStatusType', 'SensorStatusTypeExtended', 'SensorStatusTypeExtendedRef', 'SensorStatusTypeOriginal', 'Stereotype', 'StereotypeType', 'StereotypeTypeExtended', 'StereotypeTypeExtendedRef', 'StereotypeTypeOriginal', 'StringLiteral', 'StructureElement', 'System', 'SystemConcept', 'SystemElement', 'SystemSubType', 'SystemSubTypeExtended', 'SystemSubTypeExtendedRef', 'SystemSubTypeOriginal', 'SystemType', 'SystemTypeExtended', 'SystemTypeExtendedRef', 'SystemTypeOriginal', 'Tag', 'TernaryExpression', 'TypeExtended', 'UCActions', 'UCExtends', 'UCExtensionPoint', 'UCExtensionPoints', 'UCIncludes', 'UIAction', 'UIActionEvent', 'UIActionEventType', 'UIActionEventTypeExtended', 'UIActionEventTypeExtendedRef', 'UIActionEventTypeOriginal', 'UIActionType', 'UIActionTypeExtended', 'UIActionTypeExtendedRef', 'UIActionTypeOriginal', 'UICatchingEvent', 'UIComponent', 'UIComponentPart', 'UIComponentPartSubType', 'UIComponentPartSubTypeExtended', 'UIComponentPartSubTypeExtendedRef', 'UIComponentPartSubTypeOriginal', 'UIComponentPartType', 'UIComponentPartTypeExtended', 'UIComponentPartTypeExtendedRef', 'UIComponentPartTypeOriginal', 'UIComponentRef', 'UIComponentSubType', 'UIComponentSubTypeExtended', 'UIComponentSubTypeExtendedRef', 'UIComponentSubTypeOriginal', 'UIComponentType', 'UIComponentTypeExtended', 'UIComponentTypeExtendedRef', 'UIComponentTypeOriginal', 'UIContainer', 'UIContainerSubType', 'UIContainerSubTypeExtended', 'UIContainerSubTypeExtendedRef', 'UIContainerSubTypeOriginal', 'UIContainerType', 'UIContainerTypeExtended', 'UIContainerTypeExtendedRef', 'UIContainerTypeOriginal', 'UIContextExpression', 'UIElement', 'UIElementEvent', 'UIElementEventSubType', 'UIElementEventSubTypeExtended', 'UIElementEventSubTypeExtendedRef', 'UIElementEventSubTypeOriginal', 'UIElementEventType', 'UIElementEventTypeExtended', 'UIElementEventTypeExtendedRef', 'UIElementEventTypeOriginal', 'UIEvent', 'UIExpression', 'UIModelElement', 'UIParameter', 'UIParameterBinding', 'UIParameterBindingGroup', 'UIPortDefinition', 'UIPortDefinitionType', 'UIPortDefinitionTypeExtended', 'UIPortDefinitionTypeExtendedRef', 'UIPortDefinitionTypeOriginal', 'UISimpleExpression', 'UISystemEvent', 'UISystemEventType', 'UISystemEventTypeExtended', 'UISystemEventTypeExtendedRef', 'UISystemEventTypeOriginal', 'UIThrowingEvent', 'UIThrowingEventType', 'UIThrowingEventTypeExtended', 'UIThrowingEventTypeExtendedRef', 'UIThrowingEventTypeOriginal', 'UIWireframeType', 'UIWireframeTypeExtended', 'UIWireframeTypeExtendedRef', 'UIWireframeTypeOriginal', 'UpdateField', 'UpdateFields', 'UseCase', 'UseCaseType', 'UseCaseTypeExtended', 'UseCaseTypeExtendedRef', 'UseCaseTypeOriginal', 'UserActivityStatusType', 'UserActivityStatusTypeExtended', 'UserActivityStatusTypeExtendedRef', 'UserActivityStatusTypeOriginal', 'Variable', 'VariableReference', '_Date', '_Function'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case _Date:
            case DoubleOrInt:
            case Month:
            case Percentage: {
                return this.isSubtype(AttributeValue, supertype);
            }
            case ActionTypeExtended:
            case ActiveEventTypeExtended:
            case ActiveFlowTypeExtended:
            case ActiveTaskTypeExtended:
            case ActorTypeExtended:
            case ContextDimensionDeviceTypeExtended:
            case ContextDimensionSensorTypeExtended:
            case DataAttributeTypeExtended:
            case DataEntityClusterTypeExtended:
            case DataEntitySubTypeExtended:
            case DataEntityTypeExtended:
            case ForeignKeyOnDeleteTypeExtended:
            case MetricTypeExtended:
            case NetworkConnectivityTypeExtended:
            case ScreenSizeCategoryTypeExtended:
            case SensorStatusTypeExtended:
            case StereotypeTypeExtended:
            case SystemSubTypeExtended:
            case SystemTypeExtended:
            case UIActionEventTypeExtended:
            case UIActionTypeExtended:
            case UIComponentPartSubTypeExtended:
            case UIComponentPartTypeExtended:
            case UIComponentSubTypeExtended:
            case UIComponentTypeExtended:
            case UIContainerSubTypeExtended:
            case UIContainerTypeExtended:
            case UIElementEventSubTypeExtended:
            case UIElementEventTypeExtended:
            case UIPortDefinitionTypeExtended:
            case UISystemEventTypeExtended:
            case UIThrowingEventTypeExtended:
            case UIWireframeTypeExtended:
            case UseCaseTypeExtended: {
                return this.isSubtype(TypeExtended, supertype);
            }
            case ActionTypeExtendedRef:
            case ActionTypeOriginal: {
                return this.isSubtype(ActionType, supertype);
            }
            case ActiveElement: {
                return this.isSubtype(BehaviorElement, supertype);
            }
            case ActiveEvent:
            case ActiveFlow:
            case ActiveTask:
            case UseCase: {
                return this.isSubtype(ActiveElement, supertype);
            }
            case ActiveEventTypeExtendedRef:
            case ActiveEventTypeOriginal: {
                return this.isSubtype(ActiveEventType, supertype);
            }
            case ActiveFlowTypeExtendedRef:
            case ActiveFlowTypeOriginal: {
                return this.isSubtype(ActiveFlowType, supertype);
            }
            case ActiveStructureElement:
            case PassiveStructureElement: {
                return this.isSubtype(StructureElement, supertype);
            }
            case ActiveTaskTypeExtendedRef:
            case ActiveTaskTypeOriginal: {
                return this.isSubtype(ActiveTaskType, supertype);
            }
            case ActorTypeExtendedRef:
            case ActorTypeOriginal: {
                return this.isSubtype(ActorType, supertype);
            }
            case ArithmeticFormula:
            case DetailsFormula: {
                return this.isSubtype(Formula, supertype);
            }
            case ArithmeticSigned:
            case BooleanExpression:
            case BooleanNegation:
            case Comparison:
            case Equals:
            case LiteralExpression:
            case Membership:
            case Minus:
            case MultiOrDivOrMod:
            case Plus:
            case TernaryExpression: {
                return this.isSubtype(Expression, supertype);
            }
            case BehaviorElement:
            case IncludeElementGeneric:
            case OtherElement:
            case StructureElement:
            case UIModelElement: {
                return this.isSubtype(SystemElement, supertype);
            }
            case BooleanLiteral:
            case IntegerLiteral:
            case NullLiteral:
            case StringLiteral: {
                return this.isSubtype(LiteralExpression, supertype);
            }
            case Context:
            case Stereotype:
            case TypeExtended: {
                return this.isSubtype(OtherElement, supertype);
            }
            case ContextDimension: {
                return this.isSubtype(ActiveStructureElement, supertype) || this.isSubtype(ContextElement, supertype);
            }
            case ContextDimensionActor:
            case ContextDimensionDevice:
            case ContextDimensionSensor: {
                return this.isSubtype(ContextDimension, supertype);
            }
            case ContextDimensionDeviceTypeExtendedRef:
            case ContextDimensionDeviceTypeOriginal: {
                return this.isSubtype(ContextDimensionDeviceType, supertype);
            }
            case ContextDimensionSensorTypeExtendedRef:
            case ContextDimensionSensorTypeOriginal: {
                return this.isSubtype(ContextDimensionSensorType, supertype);
            }
            case ContextVariable: {
                return this.isSubtype(ContextElement, supertype);
            }
            case Data:
            case DataEntityGeneric:
            case DataEnumeration: {
                return this.isSubtype(PassiveStructureElement, supertype);
            }
            case DataAttributeTypeExtendedRef:
            case DataAttributeTypeOriginal:
            case DataEnumerationRef: {
                return this.isSubtype(DataAttributeType, supertype);
            }
            case DataEntity:
            case DataEntityCluster: {
                return this.isSubtype(DataEntityGeneric, supertype);
            }
            case DataEntityClusterTypeExtendedRef:
            case DataEntityClusterTypeOriginal: {
                return this.isSubtype(DataEntityClusterType, supertype);
            }
            case DataEntitySubTypeExtendedRef:
            case DataEntitySubTypeOriginal: {
                return this.isSubtype(DataEntitySubType, supertype);
            }
            case DataEntityTypeExtendedRef:
            case DataEntityTypeOriginal: {
                return this.isSubtype(DataEntityType, supertype);
            }
            case FlowElement:
            case UIExpression:
            case UIParameter:
            case UIParameterBinding:
            case UIParameterBindingGroup: {
                return this.isSubtype(UIModelElement, supertype);
            }
            case ForeignKeyOnDeleteTypeExtendedRef:
            case ForeignKeyOnDeleteTypeOriginal: {
                return this.isSubtype(ForeignKeyOnDeleteType, supertype);
            }
            case FunctionReference:
            case VariableReference: {
                return this.isSubtype(Expression, supertype) || this.isSubtype(LiteralExpression, supertype) || this.isSubtype(TernaryExpression, supertype);
            }
            case IncludeAll:
            case IncludeElement: {
                return this.isSubtype(IncludeElementGeneric, supertype);
            }
            case MetricTypeExtendedRef:
            case MetricTypeOriginal: {
                return this.isSubtype(MetricType, supertype);
            }
            case NetworkConnectivityTypeExtendedRef:
            case NetworkConnectivityTypeOriginal: {
                return this.isSubtype(NetworkConnectivityType, supertype);
            }
            case PackageSystem: {
                return this.isSubtype(PackageAbstract, supertype);
            }
            case ScreenSizeCategoryTypeExtendedRef:
            case ScreenSizeCategoryTypeOriginal: {
                return this.isSubtype(ScreenSizeCategoryType, supertype);
            }
            case SensorStatusTypeExtendedRef:
            case SensorStatusTypeOriginal: {
                return this.isSubtype(SensorStatusType, supertype);
            }
            case StereotypeTypeExtendedRef:
            case StereotypeTypeOriginal: {
                return this.isSubtype(StereotypeType, supertype);
            }
            case SystemElement: {
                return this.isSubtype(SystemConcept, supertype);
            }
            case SystemSubTypeExtendedRef:
            case SystemSubTypeOriginal: {
                return this.isSubtype(SystemSubType, supertype);
            }
            case SystemTypeExtendedRef:
            case SystemTypeOriginal: {
                return this.isSubtype(SystemType, supertype);
            }
            case UIAction:
            case UIComponentPart:
            case UIElement:
            case UIEvent:
            case UIPortDefinition: {
                return this.isSubtype(FlowElement, supertype);
            }
            case UIActionEvent:
            case UIElementEvent:
            case UISystemEvent: {
                return this.isSubtype(UICatchingEvent, supertype);
            }
            case UIActionEventTypeExtendedRef:
            case UIActionEventTypeOriginal: {
                return this.isSubtype(UIActionEventType, supertype);
            }
            case UIActionTypeExtendedRef:
            case UIActionTypeOriginal: {
                return this.isSubtype(UIActionType, supertype);
            }
            case UICatchingEvent:
            case UIThrowingEvent: {
                return this.isSubtype(UIEvent, supertype);
            }
            case UIComponent:
            case UIComponentRef:
            case UIContainer: {
                return this.isSubtype(UIElement, supertype);
            }
            case UIComponentPartSubTypeExtendedRef:
            case UIComponentPartSubTypeOriginal: {
                return this.isSubtype(UIComponentPartSubType, supertype);
            }
            case UIComponentPartTypeExtendedRef:
            case UIComponentPartTypeOriginal: {
                return this.isSubtype(UIComponentPartType, supertype);
            }
            case UIComponentSubTypeExtendedRef:
            case UIComponentSubTypeOriginal: {
                return this.isSubtype(UIComponentSubType, supertype);
            }
            case UIComponentTypeExtendedRef:
            case UIComponentTypeOriginal: {
                return this.isSubtype(UIComponentType, supertype);
            }
            case UIContainerSubTypeExtendedRef:
            case UIContainerSubTypeOriginal: {
                return this.isSubtype(UIContainerSubType, supertype);
            }
            case UIContainerTypeExtendedRef:
            case UIContainerTypeOriginal: {
                return this.isSubtype(UIContainerType, supertype);
            }
            case UIContextExpression:
            case UISimpleExpression: {
                return this.isSubtype(UIExpression, supertype);
            }
            case UIElementEventSubTypeExtendedRef:
            case UIElementEventSubTypeOriginal: {
                return this.isSubtype(UIElementEventSubType, supertype);
            }
            case UIElementEventTypeExtendedRef:
            case UIElementEventTypeOriginal: {
                return this.isSubtype(UIElementEventType, supertype);
            }
            case UIPortDefinitionTypeExtendedRef:
            case UIPortDefinitionTypeOriginal: {
                return this.isSubtype(UIPortDefinitionType, supertype);
            }
            case UISystemEventTypeExtendedRef:
            case UISystemEventTypeOriginal: {
                return this.isSubtype(UISystemEventType, supertype);
            }
            case UIThrowingEventTypeExtendedRef:
            case UIThrowingEventTypeOriginal: {
                return this.isSubtype(UIThrowingEventType, supertype);
            }
            case UIWireframeTypeExtendedRef:
            case UIWireframeTypeOriginal: {
                return this.isSubtype(UIWireframeType, supertype);
            }
            case UseCaseTypeExtendedRef:
            case UseCaseTypeOriginal: {
                return this.isSubtype(UseCaseType, supertype);
            }
            case UserActivityStatusTypeExtendedRef:
            case UserActivityStatusTypeOriginal: {
                return this.isSubtype(UserActivityStatusType, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'ActionTypeExtendedRef:type': {
                return ActionTypeExtended;
            }
            case 'ActiveEventTypeExtendedRef:type': {
                return ActiveEventTypeExtended;
            }
            case 'ActiveFlowTypeExtendedRef:type': {
                return ActiveFlowTypeExtended;
            }
            case 'ActiveTask:partOf': {
                return ActiveTask;
            }
            case 'ActiveTaskTypeExtendedRef:type': {
                return ActiveTaskTypeExtended;
            }
            case 'ActorTypeExtendedRef:type': {
                return ActorTypeExtended;
            }
            case 'ChildDataEntity:child':
            case 'Data:type':
            case 'DataEntity:super':
            case 'DataEntityCluster:main':
            case 'ForeignKey:targetEntity':
            case 'ManyToMany:targetEntity':
            case 'ManyToMany:throughEntity':
            case 'RefDataEntity:refDataEntity': {
                return DataEntity;
            }
            case 'Context:actors':
            case 'ContextDimensionActor:super':
            case 'RefActor:refs':
            case 'UseCase:actorInitiates': {
                return ContextDimensionActor;
            }
            case 'Context:devices': {
                return ContextDimensionDevice;
            }
            case 'Context:sensors': {
                return ContextDimensionSensor;
            }
            case 'ContextDimensionDeviceTypeExtendedRef:type': {
                return ContextDimensionDeviceTypeExtended;
            }
            case 'ContextDimensionSensorTypeExtendedRef:type': {
                return ContextDimensionSensorTypeExtended;
            }
            case 'DataAttributeRefs:attributeRef':
            case 'DataAttributeRefsList:attributeRef':
            case 'DataEntityConstraint:showAsAttribute':
            case 'DetailsFormula:attr':
            case 'ForeignKey:showAsField':
            case 'ForeignKey:toField':
            case 'ManyToMany:throughSourceField':
            case 'ManyToMany:throughTargetField':
            case 'UIComponent:orderBy':
            case 'UIComponent:rnOrderBy':
            case 'UIComponentPart:dataAttributeBinding':
            case 'UIComponentPart:orderBy':
            case 'Variable:value': {
                return DataAttribute;
            }
            case 'DataAttributeTypeExtendedRef:type': {
                return DataAttributeTypeExtended;
            }
            case 'DataEntityClusterTypeExtendedRef:type': {
                return DataEntityClusterTypeExtended;
            }
            case 'DataEntitySubTypeExtendedRef:type': {
                return DataEntitySubTypeExtended;
            }
            case 'DataEntityTypeExtendedRef:type': {
                return DataEntityTypeExtended;
            }
            case 'DataEnumerationRef:type': {
                return DataEnumeration;
            }
            case 'DetailsFormula:dataEntity':
            case 'UIComponent:dataEntity':
            case 'UIComponent:rnDataEntity':
            case 'UIComponentPart:dataEntity':
            case 'UseCase:dataEntity': {
                return DataEntityGeneric;
            }
            case 'ForeignKeyOnDeleteTypeExtendedRef:type': {
                return ForeignKeyOnDeleteTypeExtended;
            }
            case 'IncludeAll:system':
            case 'IncludeElement:system':
            case 'RefSystems:refs':
            case 'System:partOf':
            case 'System:sut': {
                return System;
            }
            case 'IncludeElement:element': {
                return SystemElement;
            }
            case 'MetricTypeExtendedRef:type': {
                return MetricTypeExtended;
            }
            case 'NetworkConnectivityTypeExtendedRef:type': {
                return NetworkConnectivityTypeExtended;
            }
            case 'RefActiveElement:refActiveElement': {
                return ActiveElement;
            }
            case 'RefFlowTo:refFlowTo': {
                return FlowElement;
            }
            case 'RefUC:refs':
            case 'UCExtends:usecase': {
                return UseCase;
            }
            case 'ScreenSizeCategoryTypeExtendedRef:type': {
                return ScreenSizeCategoryTypeExtended;
            }
            case 'SensorStatusTypeExtendedRef:type': {
                return SensorStatusTypeExtended;
            }
            case 'StereotypeTypeExtendedRef:type': {
                return StereotypeTypeExtended;
            }
            case 'SystemSubTypeExtendedRef:type': {
                return SystemSubTypeExtended;
            }
            case 'SystemTypeExtendedRef:type': {
                return SystemTypeExtended;
            }
            case 'UCExtends:extensionPoint': {
                return UCExtensionPoint;
            }
            case 'UIActionEventTypeExtendedRef:type': {
                return UIActionEventTypeExtended;
            }
            case 'UIActionTypeExtendedRef:type': {
                return UIActionTypeExtended;
            }
            case 'UIComponent:dataFlowTos':
            case 'UIComponentRef:ref': {
                return UIComponent;
            }
            case 'UIComponentPartSubTypeExtendedRef:type': {
                return UIComponentPartSubTypeExtended;
            }
            case 'UIComponentPartTypeExtendedRef:type': {
                return UIComponentPartTypeExtended;
            }
            case 'UIComponentSubTypeExtendedRef:type': {
                return UIComponentSubTypeExtended;
            }
            case 'UIComponentTypeExtendedRef:type': {
                return UIComponentTypeExtended;
            }
            case 'UIContainerSubTypeExtendedRef:type': {
                return UIContainerSubTypeExtended;
            }
            case 'UIContainerTypeExtendedRef:type': {
                return UIContainerTypeExtended;
            }
            case 'UIContextExpression:validContext': {
                return Context;
            }
            case 'UIElementEventSubTypeExtendedRef:type': {
                return UIElementEventSubTypeExtended;
            }
            case 'UIElementEventTypeExtendedRef:type': {
                return UIElementEventTypeExtended;
            }
            case 'UIPortDefinitionTypeExtendedRef:type': {
                return UIPortDefinitionTypeExtended;
            }
            case 'UISystemEventTypeExtendedRef:type': {
                return UISystemEventTypeExtended;
            }
            case 'UIThrowingEventTypeExtendedRef:type': {
                return UIThrowingEventTypeExtended;
            }
            case 'UIWireframeTypeExtendedRef:type': {
                return UIWireframeTypeExtended;
            }
            case 'UseCaseTypeExtendedRef:type': {
                return UseCaseTypeExtended;
            }
            case 'UserActivityStatusTypeExtendedRef:type': {
                return UserActivityStatusTypeExtended;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case '_Function': {
                return {
                    name: '_Function',
                    mandatory: [
                        { name: 'params', type: 'array' }
                    ]
                };
            }
            case 'ActiveEvent': {
                return {
                    name: 'ActiveEvent',
                    mandatory: [
                        { name: 'isFinal', type: 'boolean' },
                        { name: 'isInitial', type: 'boolean' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'ActiveFlow': {
                return {
                    name: 'ActiveFlow',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'ActiveTask': {
                return {
                    name: 'ActiveTask',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'Context': {
                return {
                    name: 'Context',
                    mandatory: [
                        { name: 'actors', type: 'array' },
                        { name: 'devices', type: 'array' },
                        { name: 'sensors', type: 'array' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'ContextDimensionActor': {
                return {
                    name: 'ContextDimensionActor',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'ContextDimensionDevice': {
                return {
                    name: 'ContextDimensionDevice',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'ContextDimensionSensor': {
                return {
                    name: 'ContextDimensionSensor',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'ContextVariable': {
                return {
                    name: 'ContextVariable',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'Data': {
                return {
                    name: 'Data',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'DataAttribute': {
                return {
                    name: 'DataAttribute',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'DataAttributeConstraint': {
                return {
                    name: 'DataAttributeConstraint',
                    mandatory: [
                        { name: 'checks', type: 'array' }
                    ]
                };
            }
            case 'DataAttributeRefs': {
                return {
                    name: 'DataAttributeRefs',
                    mandatory: [
                        { name: 'attributeRef', type: 'array' }
                    ]
                };
            }
            case 'DataAttributeRefsList': {
                return {
                    name: 'DataAttributeRefsList',
                    mandatory: [
                        { name: 'attributeRef', type: 'array' }
                    ]
                };
            }
            case 'DataAttributeTableRow': {
                return {
                    name: 'DataAttributeTableRow',
                    mandatory: [
                        { name: 'attributeValues', type: 'array' }
                    ]
                };
            }
            case 'DataAttributeValues': {
                return {
                    name: 'DataAttributeValues',
                    mandatory: [
                        { name: 'tableRows', type: 'array' }
                    ]
                };
            }
            case 'DataEntity': {
                return {
                    name: 'DataEntity',
                    mandatory: [
                        { name: 'attributes', type: 'array' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'DataEntityCluster': {
                return {
                    name: 'DataEntityCluster',
                    mandatory: [
                        { name: 'children', type: 'array' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'DataEntityConstraint': {
                return {
                    name: 'DataEntityConstraint',
                    mandatory: [
                        { name: 'checks', type: 'array' }
                    ]
                };
            }
            case 'DataEnumeration': {
                return {
                    name: 'DataEnumeration',
                    mandatory: [
                        { name: 'tags', type: 'array' },
                        { name: 'values', type: 'array' }
                    ]
                };
            }
            case 'IncludeAll': {
                return {
                    name: 'IncludeAll',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'IncludeElement': {
                return {
                    name: 'IncludeElement',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'Membership': {
                return {
                    name: 'Membership',
                    mandatory: [
                        { name: 'right', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'packages', type: 'array' }
                    ]
                };
            }
            case 'PackageSystem': {
                return {
                    name: 'PackageSystem',
                    mandatory: [
                        { name: 'imports', type: 'array' }
                    ]
                };
            }
            case 'RefActiveElement': {
                return {
                    name: 'RefActiveElement',
                    mandatory: [
                        { name: 'refActiveElement', type: 'array' }
                    ]
                };
            }
            case 'RefActor': {
                return {
                    name: 'RefActor',
                    mandatory: [
                        { name: 'refs', type: 'array' }
                    ]
                };
            }
            case 'RefDataEntity': {
                return {
                    name: 'RefDataEntity',
                    mandatory: [
                        { name: 'refDataEntity', type: 'array' }
                    ]
                };
            }
            case 'RefFlowTo': {
                return {
                    name: 'RefFlowTo',
                    mandatory: [
                        { name: 'parameterBindingGroup', type: 'array' },
                        { name: 'refFlowTo', type: 'array' }
                    ]
                };
            }
            case 'RefSystems': {
                return {
                    name: 'RefSystems',
                    mandatory: [
                        { name: 'refs', type: 'array' }
                    ]
                };
            }
            case 'RefUC': {
                return {
                    name: 'RefUC',
                    mandatory: [
                        { name: 'refs', type: 'array' }
                    ]
                };
            }
            case 'Stereotype': {
                return {
                    name: 'Stereotype',
                    mandatory: [
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'System': {
                return {
                    name: 'System',
                    mandatory: [
                        { name: 'isFinal', type: 'boolean' },
                        { name: 'isReusable', type: 'boolean' },
                        { name: 'isTestSuite', type: 'boolean' },
                        { name: 'systemConcepts', type: 'array' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            case 'UCActions': {
                return {
                    name: 'UCActions',
                    mandatory: [
                        { name: 'actions', type: 'array' }
                    ]
                };
            }
            case 'UCExtensionPoints': {
                return {
                    name: 'UCExtensionPoints',
                    mandatory: [
                        { name: 'extensionPoints', type: 'array' }
                    ]
                };
            }
            case 'UCIncludes': {
                return {
                    name: 'UCIncludes',
                    mandatory: [
                        { name: 'includes', type: 'array' }
                    ]
                };
            }
            case 'UIAction': {
                return {
                    name: 'UIAction',
                    mandatory: [
                        { name: 'tags', type: 'array' },
                        { name: 'uiActionEvents', type: 'array' },
                        { name: 'uiParameters', type: 'array' }
                    ]
                };
            }
            case 'UIActionEvent': {
                return {
                    name: 'UIActionEvent',
                    mandatory: [
                        { name: 'tags', type: 'array' },
                        { name: 'uiParameters', type: 'array' }
                    ]
                };
            }
            case 'UIComponent': {
                return {
                    name: 'UIComponent',
                    mandatory: [
                        { name: 'dataFlowTos', type: 'array' },
                        { name: 'dataParameterBindingGroups', type: 'array' },
                        { name: 'isActive', type: 'boolean' },
                        { name: 'isScrollable', type: 'boolean' },
                        { name: 'isSlider', type: 'boolean' },
                        { name: 'tags', type: 'array' },
                        { name: 'uiComponentParts', type: 'array' },
                        { name: 'uiElementEvents', type: 'array' },
                        { name: 'uiParameters', type: 'array' }
                    ]
                };
            }
            case 'UIComponentPart': {
                return {
                    name: 'UIComponentPart',
                    mandatory: [
                        { name: 'isHidden', type: 'boolean' },
                        { name: 'isReadOnly', type: 'boolean' },
                        { name: 'tags', type: 'array' },
                        { name: 'uiComponentParts', type: 'array' },
                        { name: 'uiElementEvents', type: 'array' }
                    ]
                };
            }
            case 'UIContainer': {
                return {
                    name: 'UIContainer',
                    mandatory: [
                        { name: 'isDefault', type: 'boolean' },
                        { name: 'isLandmark', type: 'boolean' },
                        { name: 'isXOR', type: 'boolean' },
                        { name: 'tags', type: 'array' },
                        { name: 'uiActions', type: 'array' },
                        { name: 'uiElementEvents', type: 'array' },
                        { name: 'uiElements', type: 'array' },
                        { name: 'uiParameters', type: 'array' }
                    ]
                };
            }
            case 'UIElementEvent': {
                return {
                    name: 'UIElementEvent',
                    mandatory: [
                        { name: 'activationExpression', type: 'array' },
                        { name: 'interactionFlowExpression', type: 'array' },
                        { name: 'tags', type: 'array' },
                        { name: 'uiParameters', type: 'array' }
                    ]
                };
            }
            case 'UIParameterBindingGroup': {
                return {
                    name: 'UIParameterBindingGroup',
                    mandatory: [
                        { name: 'uiParameterBindings', type: 'array' }
                    ]
                };
            }
            case 'UIPortDefinition': {
                return {
                    name: 'UIPortDefinition',
                    mandatory: [
                        { name: 'tags', type: 'array' },
                        { name: 'uiParameters', type: 'array' }
                    ]
                };
            }
            case 'UISystemEvent': {
                return {
                    name: 'UISystemEvent',
                    mandatory: [
                        { name: 'tags', type: 'array' },
                        { name: 'triggeringExpressions', type: 'array' },
                        { name: 'uiParameters', type: 'array' }
                    ]
                };
            }
            case 'UIThrowingEvent': {
                return {
                    name: 'UIThrowingEvent',
                    mandatory: [
                        { name: 'tags', type: 'array' },
                        { name: 'uiParameters', type: 'array' }
                    ]
                };
            }
            case 'UpdateFields': {
                return {
                    name: 'UpdateFields',
                    mandatory: [
                        { name: 'updateFields', type: 'array' }
                    ]
                };
            }
            case 'UseCase': {
                return {
                    name: 'UseCase',
                    mandatory: [
                        { name: 'actorParticipates', type: 'array' },
                        { name: 'extends', type: 'array' },
                        { name: 'isAbstract', type: 'boolean' },
                        { name: 'isConcrete', type: 'boolean' },
                        { name: 'isNegative', type: 'boolean' },
                        { name: 'isPositive', type: 'boolean' },
                        { name: 'isProblem', type: 'boolean' },
                        { name: 'isSolution', type: 'boolean' },
                        { name: 'tags', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new AslAstReflection();
