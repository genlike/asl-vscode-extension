/*
 * ITLingo's ASL (Application Specification Language) Grammar
 
 * Author: Alberto Rodrigues da Silva
 * Created Date: 2019/February
 */

grammar org.itlingo.asl.Asl 
with org.eclipse.xtext.common.Terminals  

generate asl "http://www.itlingo.org/asl/Asl" 

Model: (packages+= PackageAbstract)*;

/********************************************************************************
*   Names and Import Rule(s)
*********************************************************************************/

QualifiedName:
ID ('.' ID)*;

QualifiedNameWithWildcard:
QualifiedName '.*'?;

Import:
'Import' importedNamespace=QualifiedNameWithWildcard;

/********************************************************************************
*   General Rule(s)
*********************************************************************************/

terminal DOUBLE: INT '.' INT;
							   
DoubleOrInt: DOUBLE | INT;

Percentage hidden(): DoubleOrInt '%';

Month: type=('Jan'|'Feb'|'Mar'|'Apr'|'May'|'Jun'|'Jul'|'Aug'|'Sep'|'Oct'|'Nov'|'Dec');

_Date: day=INT '-' month=Month '-' year=INT;

AttributeValue :  value= STRING | _Date | Month | {AttributeValue} DoubleOrInt | {AttributeValue} Percentage;

Multiplicity: type=('"0"' | '"1"' | '"0..1"' | '"*"' | STRING);

Tag: 'tag' '(' 'name' nameAlias=STRING ('value' value=STRING)? ')';

Stereotype: 
'stereotype' name=ID  (nameAlias=STRING)?  ':' type=StereotypeType ('['
 (tags+=Tag)*
 ('description' description=STRING)?
']')?;

IncludeAll :
'IncludeAll'  'fromSystem' system=[System] ('['
 (tags+=Tag)*
 ('description' description=STRING)?
']')?;

IncludeElement:
'Include' type=IncludeSystemElementType 'fromSystem' system=[System] 
 'element' element=[SystemElement  | QualifiedName] ('['
 (updateFields= UpdateFields)?		
 (tags+=Tag)*
 ('description' description=STRING)?
']')?;

UpdateFields: 
'updateFields'  updateFields += UpdateField (',' updateFields += UpdateField )*;

UpdateField: 
(nameField=STRING) "with" (valueField=STRING);

/********************************************************************************
*   Types and SubTypes Rule(s)
*********************************************************************************/

TypeExtended:
SystemTypeExtended | SystemSubTypeExtended | 
MetricTypeExtended | 
ActorTypeExtended | 
ActiveEventTypeExtended | ActiveTaskTypeExtended | ActiveFlowTypeExtended | 
UseCaseTypeExtended | ActionTypeExtended |
DataEntityTypeExtended | DataEntitySubTypeExtended | DataEntityClusterTypeExtended | DataAttributeTypeExtended | ForeignKeyOnDeleteTypeExtended |
UIContainerTypeExtended | UIContainerSubTypeExtended | 
UIComponentTypeExtended | UIComponentSubTypeExtended | 
UIWireframeTypeExtended | 
UIComponentPartTypeExtended | UIComponentPartSubTypeExtended | 
UIActionTypeExtended | 
UIPortDefinitionTypeExtended | 
UIThrowingEventTypeExtended | 
UISystemEventTypeExtended | 
UIActionEventTypeExtended | 
UIElementEventTypeExtended | UIElementEventSubTypeExtended | 
ContextDimensionDeviceTypeExtended | ScreenSizeCategoryTypeExtended | NetworkConnectivityTypeExtended | 
ContextDimensionSensorTypeExtended | SensorStatusTypeExtended | 
StereotypeTypeExtended
;

SystemType: SystemTypeOriginal |SystemTypeExtendedRef;
SystemTypeExtended: 'SystemType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
SystemTypeExtendedRef: type= [SystemTypeExtended | QualifiedName];
SystemTypeOriginal: type= ('Business' | 'Application' | 'SoftwareSystem' | 'HardwareSystem' | 'Other');  

SystemSubType: SystemSubTypeOriginal |SystemSubTypeExtendedRef;
SystemSubTypeExtended: 'SystemSubType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
SystemSubTypeExtendedRef: type= [SystemSubTypeExtended | QualifiedName];
SystemSubTypeOriginal: type= ('Business_PublicSector' | 'Business_IT' | 'Business_Other' |
'Application_Web' | 'Application_Mobile' | 'Application_Desktop' | 'Application_Sensor' | 'Application_Actuator' | 'Application_Other' |
'SoftwareSystem_OS' | 'SoftwareSystem_VM' | 'SoftwareSystem_DBMS' | 'SoftwareSystem_WebServer' | 'SoftwareSystem_WebClient' | 
'SoftwareSystem_EmailServer' | 'SoftwareSystem_EmailClient' | 'SoftwareSystem_OfficeTool' | 'SoftwareSystem_OtherServer' | 'SoftwareSystem_OtherClient' | 'SoftwareSystem_Other' | 
'HardwareSystem_Server' | 'HardwareSystem_Desktop' | 'HardwareSystem_Laptop' | 'HardwareSystem_Smartphone' | 'HardwareSystem_Smartwatch' | 'HardwareSystem_Sensor' | 'HardwareSystem_Actuator' | 
'HardwareSystem_Storage' | 'HardwareSystem_Printer' | 'HardwareSystem_Network' | 'HardwareSystem_Other' );

MetricType: MetricTypeOriginal | MetricTypeExtendedRef;
MetricTypeExtended: 'MetricType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
MetricTypeExtendedRef: type= [MetricTypeExtended | QualifiedName];
MetricTypeOriginal: type = ('Time_Day' | 'Time_Hour' | 'Time_Min' | 'Time_Sec' | 'Time_mSec' | 
'Frequency_Hz' | 'Frequency_KHz' | 'Frequency_MHz' |
'Capacity_KByte' | 'Capacity_MByte' | 'Capacity_GByte' | 'Capacity_TByte' | 'Capacity_PByte' | 'Capacity_EByte' |
'Task' | 'Error' | 'Error_PerTask' | 'Click' |
'Range_LikertScale' | 'Range_Binary' | 'Range_Other' | 'Other');

ActorType: ActorTypeOriginal |ActorTypeExtendedRef;
ActorTypeExtended: 'ActorType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
ActorTypeExtendedRef: type= [ActorTypeExtended | QualifiedName];
ActorTypeOriginal: type = ('User' | 'ExternalSystem' | 'Timer');

ActiveEventType: ActiveEventTypeOriginal |ActiveEventTypeExtendedRef;
ActiveEventTypeExtended: 'ActiveEventType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
ActiveEventTypeExtendedRef: type= [ActiveEventTypeExtended | QualifiedName];
ActiveEventTypeOriginal: type = ('Send' | 'Receive' | 'Timer' | 'Terminate' | 'Cancel' | 'Error' | 'Signal' | 'Conditional' | 'Undefined'); 

ActiveTaskType: ActiveTaskTypeOriginal |ActiveTaskTypeExtendedRef;
ActiveTaskTypeExtended: 'ActiveTaskType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
ActiveTaskTypeExtendedRef: type= [ActiveTaskTypeExtended | QualifiedName];
ActiveTaskTypeOriginal: type = ('Manual' | 'User' | 'Service' | 'Send' | 'Receive' | 'Script' | 'BusinessRule' | 'Undefined'); 

ActiveFlowType: ActiveFlowTypeOriginal |ActiveFlowTypeExtendedRef;
ActiveFlowTypeExtended: 'ActiveFlowType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
ActiveFlowTypeExtendedRef: type= [ActiveFlowTypeExtended | QualifiedName];
ActiveFlowTypeOriginal: type = ('Sequence' | 'SequenceConditional' | 'Parallel');

UseCaseType: UseCaseTypeOriginal | UseCaseTypeExtendedRef;
UseCaseTypeExtended: 'UseCaseType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UseCaseTypeExtendedRef: type= [UseCaseTypeExtended | QualifiedName];
UseCaseTypeOriginal: type = (
'EntityCreate' | 'EntityRead' | 'EntityUpdate' | 'EntityDelete' | 'EntityReport' | 'EntityDashboard' | 'EntityOther' | 
'EntitiesManage' | 'EntitiesBrowse' | 'EntitiesSearch' | 'EntitiesReport' | 'EntitiesDashboard' | 
'EntitiesInteropImport' | 'EntitiesInteropExport' | 'EntitiesInteropSync' | 
'EntitiesInteropSendMessage' | 'EntitiesInteropServiceInvocation' | 
'EntitiesMapShow' | 'EntitiesMapInteract' | 'EntitiesOther' | 
'Other');

ActionType: ActionTypeOriginal | ActionTypeExtendedRef;
ActionTypeExtended: 'ActionType' name=ID  (nameAlias=STRING)? ('[' ('description' description=STRING)? ']' )?;
ActionTypeExtendedRef: type= [ActionTypeExtended | QualifiedName];
ActionTypeOriginal: type = ('aCreate' | 'aRead' | 'aUpdate' | 'aDelete');

DataEntityType: DataEntityTypeOriginal | DataEntityTypeExtendedRef;
DataEntityTypeExtended: 'DataEntityType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
DataEntityTypeExtendedRef: type= [DataEntityTypeExtended | QualifiedName];
DataEntityTypeOriginal: type = ('Parameter' | 'Reference' | 'Master' | 'Document' | 'Transaction' | 'Other');
//See: https://docs.microsoft.com/en-us/dynamics365/unified-operations/dev-itpro/data-entities/data-entities?toc=/fin-and-ops/toc.json#categories-of-entities

DataEntitySubType: DataEntitySubTypeOriginal |DataEntitySubTypeExtendedRef;
DataEntitySubTypeExtended: 'DataEntitySubType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
DataEntitySubTypeExtendedRef: type= [DataEntitySubTypeExtended | QualifiedName];
DataEntitySubTypeOriginal: type = ('Regular' | 'Weak' | 'Other');

DataEntityClusterType: DataEntityClusterTypeOriginal |DataEntityClusterTypeExtendedRef;
DataEntityClusterTypeExtended: 'DataEntityClusterType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
DataEntityClusterTypeExtendedRef: type= [DataEntityClusterTypeExtended | QualifiedName];
DataEntityClusterTypeOriginal: type = ('Parameter' | 'Reference' | 'Master' | 'Document' | 'Transaction' | 'Other');

//** DataAttributeType
DataAttributeType: (DataAttributeTypeOriginal ('(' size = DoubleOrInt ')')? | DataAttributeTypeExtendedRef | ('DataEnumeration' DataEnumerationRef));
DataAttributeTypeExtended: 'DataAttributeType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')? ;
DataAttributeTypeExtendedRef: type= [DataAttributeTypeExtended | QualifiedName];
DataAttributeTypeOriginal: type = (
'Integer' | 'Double' | 'Decimal' | 'Boolean' | 'Bit' | 'Currency' | 
'Date' | 'Time' | 'Datetime' | 
'String' | 'Text' | 'Regex' | 'URL' | 'Email'|
'File' | 'Image' | 'XML' | 'Binary' | 'FilePath'
);

ForeignKeyOnDeleteType: ForeignKeyOnDeleteTypeOriginal |ForeignKeyOnDeleteTypeExtendedRef;
ForeignKeyOnDeleteTypeExtended: 'ForeignKeyOnDeleteType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
ForeignKeyOnDeleteTypeExtendedRef: type= [ForeignKeyOnDeleteTypeExtended | QualifiedName];
ForeignKeyOnDeleteTypeOriginal: type = ('CASCADE' | 'PROTECT' | 'SET_NULL' | 'SET_DEFAULT');
/* 
CASCADE: Cascade deletes. Emulates the behavior of the SQL constraint ON DELETE CASCADE and also deletes the object containing the ForeignKey.
PROTECT: Prevent deletion of the referenced object by raising an Exception.
SET_NULL: Set the ForeignKey null; this is only possible if null is True.
SET_DEFAULT: Set the ForeignKey to its default value; a default for the ForeignKey must be set.
*/

UIContainerType: UIContainerTypeOriginal |UIContainerTypeExtendedRef;
UIContainerTypeExtended: 'UIContainerType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UIContainerTypeExtendedRef: type= [UIContainerTypeExtended | QualifiedName];
UIContainerTypeOriginal: type = ('Window' | 'Menu' | 'Other');

UIContainerSubType: UIContainerSubTypeOriginal |UIContainerSubTypeExtendedRef;
UIContainerSubTypeExtended: 'UIContainerSubType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UIContainerSubTypeExtendedRef: type= [UIContainerSubTypeExtended | QualifiedName];
UIContainerSubTypeOriginal: type = ('Window_Modal' | 'Window_Modeless' | 'Menu_Main' | 'Menu_Contextual'| 'Other');

UIComponentType: UIComponentTypeOriginal |UIComponentTypeExtendedRef;
UIComponentTypeExtended: 'UIComponentType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UIComponentTypeExtendedRef: type= [UIComponentTypeExtended | QualifiedName];
UIComponentTypeOriginal: type = ('List' | 'Details' | 'Form' | 'Dialog' | 'Menu');

UIComponentSubType: UIComponentSubTypeOriginal |UIComponentSubTypeExtendedRef;
UIComponentSubTypeExtended: 'UIComponentSubType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UIComponentSubTypeExtendedRef: type= [UIComponentSubTypeExtended | QualifiedName];
UIComponentSubTypeOriginal: type = (	
'List_MultiChoice' | 'List_Tree' | 'List_Table' |  'List_Nested' | 
'Form_Simple' | 'Form_MasterDetail' | 'Form_Other' | 
'Dialog_Success' | 'Dialog_Error' | 'Dialog_Warning' |'Dialog_Info' | 'Dialog_Message' | 
'Menu_Main' | 'Menu_Contextual' |
'Other');

// Wireframe controls
// use "tags" to extend and associate specific attribute values
UIWireframeType: UIWireframeTypeOriginal |UIWireframeTypeExtendedRef;
UIWireframeTypeExtended: 'UIWireframeType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UIWireframeTypeExtendedRef: type= [UIWireframeTypeExtended | QualifiedName];
UIWireframeTypeOriginal: type = (
'WFC_Button' | 'WFC_CheckBox' | 'WFC_ComboBox' | 'WFC_Image' | 'WFC_Label' | 'WFC_List' | 'WFC_RadioButton' | 'WFC_Table' |
'WFC_AudioPlayer' | 'WFC_VideoPlayer' |'WFC_Calendar' | 'WFC_Header' | 'WFC_Hyperlink' | 'WFC_Paragraph' | 'WFC_ProgressBar' | 'WFC_Tab' | 'WFC_Text' |
'Other');

UIComponentPartType: UIComponentPartTypeOriginal |UIComponentPartTypeExtendedRef;
UIComponentPartTypeExtended: 'UIComponentPartType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UIComponentPartTypeExtendedRef: type= [UIComponentPartTypeExtended | QualifiedName];
UIComponentPartTypeOriginal: type = ('Field' |'Slot' | 'Other' );

UIComponentPartSubType: UIComponentPartSubTypeOriginal |UIComponentPartSubTypeExtendedRef;
UIComponentPartSubTypeExtended: 'UIComponentPartSubType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UIComponentPartSubTypeExtendedRef: type= [UIComponentPartSubTypeExtended | QualifiedName];
UIComponentPartSubTypeOriginal: type = ('Field_Output' | 'Field_Input' |'Field_Selection' | 'Field_EditableSelection' | 
'Slot_MenuGroup' | 'Slot_MenuOption' | 'Slot_MenuSeparator'| 'Slot_Other' | 'Other');

UIActionType: UIActionTypeOriginal |UIActionTypeExtendedRef;
UIActionTypeExtended: 'UIActionType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UIActionTypeExtendedRef: type= [UIActionTypeExtended | QualifiedName];
UIActionTypeOriginal: type = ('Server' | 'Client' | 'NotSpecified');

UIPortDefinitionType: UIPortDefinitionTypeOriginal |UIPortDefinitionTypeExtendedRef;
UIPortDefinitionTypeExtended: 'UIPortDefinitionType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UIPortDefinitionTypeExtendedRef: type= [UIPortDefinitionTypeExtended | QualifiedName];
UIPortDefinitionTypeOriginal: type = ('NotSpecified');

UIThrowingEventType: UIThrowingEventTypeOriginal |UIThrowingEventTypeExtendedRef;
UIThrowingEventTypeExtended: 'UIThrowingEventType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UIThrowingEventTypeExtendedRef: type= [UIThrowingEventTypeExtended | QualifiedName];
UIThrowingEventTypeOriginal: type = ('SetContext' | 'Jump');

UISystemEventType: UISystemEventTypeOriginal |UISystemEventTypeExtendedRef;
UISystemEventTypeExtended: 'UISystemEventType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UISystemEventTypeExtendedRef: type= [UISystemEventTypeExtended | QualifiedName];
UISystemEventTypeOriginal: type = ('Time' | 'SystemAlert'| 'SystemMessage'| 'Other');

UIActionEventType: UIActionEventTypeOriginal |UIActionEventTypeExtendedRef;
UIActionEventTypeExtended: 'UIActionEventType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UIActionEventTypeExtendedRef: type= [UIActionEventTypeExtended | QualifiedName];
UIActionEventTypeOriginal: type = ('Normal' | 'Exception' | 'Other');

UIElementEventType: UIElementEventTypeOriginal |UIElementEventTypeExtendedRef;
UIElementEventTypeExtended: 'UIElementEventType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UIElementEventTypeExtendedRef: type= [UIElementEventTypeExtended | QualifiedName];
UIElementEventTypeOriginal: type = ('Select' | 'Submit' | 'Other');

UIElementEventSubType: UIElementEventSubTypeOriginal |UIElementEventSubTypeExtendedRef;
UIElementEventSubTypeExtended: 'UIElementEventSubType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UIElementEventSubTypeExtendedRef: type= [UIElementEventSubTypeExtended | QualifiedName];
UIElementEventSubTypeOriginal: type = ('Submit_Create' | 'Submit_Read' | 'Submit_Update' | 'Submit_Delete' | 
							 'Submit_Up' | 'Submit_Back' | 'Submit_Ok' | 'Submit_Cancel' | 'Other');

ContextDimensionDeviceType: ContextDimensionDeviceTypeOriginal |ContextDimensionDeviceTypeExtendedRef;
ContextDimensionDeviceTypeExtended: 'ContextDimensionDeviceType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
ContextDimensionDeviceTypeExtendedRef: type= [ContextDimensionDeviceTypeExtended | QualifiedName];
ContextDimensionDeviceTypeOriginal: type = ('Desktop' | 'Laptop' | 'Smartphone' | 'Tablet' | 'Any' | 'Other');

ScreenSizeCategoryType: ScreenSizeCategoryTypeOriginal |ScreenSizeCategoryTypeExtendedRef;
ScreenSizeCategoryTypeExtended: 'ScreenSizeCategoryType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
ScreenSizeCategoryTypeExtendedRef: type= [ScreenSizeCategoryTypeExtended | QualifiedName];
ScreenSizeCategoryTypeOriginal: type = ('Small' | 'Normal' | 'Large' | 'ExtraLarge' | 'Any' );

NetworkConnectivityType: NetworkConnectivityTypeOriginal |NetworkConnectivityTypeExtendedRef;
NetworkConnectivityTypeExtended: 'NetworkConnectivityType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
NetworkConnectivityTypeExtendedRef: type= [NetworkConnectivityTypeExtended | QualifiedName];
NetworkConnectivityTypeOriginal: type = ('None' | 'BLUETOOTH' | 'WIFI' | 'WIMAX' | 'Any' );

ContextDimensionSensorType: ContextDimensionSensorTypeOriginal |ContextDimensionSensorTypeExtendedRef;
ContextDimensionSensorTypeExtended: 'ContextDimensionSensorType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
ContextDimensionSensorTypeExtendedRef: type= [ContextDimensionSensorTypeExtended | QualifiedName];
ContextDimensionSensorTypeOriginal: type =('Microphone' | 'Camera' | 'Localization' | 'Temperature' | 'Proximity' | 'Accelerometer' | 
'Infrared' | 'Pressure' | 'Light' | 'Touch' | 'Color' | 'Humidity' | 'Fingerprint' | 
'IrisScanner' | 'HeartRate'  | 'Other');

SensorStatusType: SensorStatusTypeOriginal |SensorStatusTypeExtendedRef;
SensorStatusTypeExtended: 'SensorStatusType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
SensorStatusTypeExtendedRef: type= [SensorStatusTypeExtended | QualifiedName];
SensorStatusTypeOriginal: type = ('Active' | 'Inactive'| 'NotDefined');

UserActivityStatusType: UserActivityStatusTypeOriginal |UserActivityStatusTypeExtendedRef;
UserActivityStatusTypeExtended: 'UserActivityStatusType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
UserActivityStatusTypeExtendedRef: type= [UserActivityStatusTypeExtended | QualifiedName];
UserActivityStatusTypeOriginal: type = ('Still' | 'Walking' | 'Running' | 'Cycling' | 'In-vehicle' | 'NotDefined' );

StereotypeType: StereotypeTypeOriginal | StereotypeTypeExtendedRef;
StereotypeTypeExtended: 'StereotypeType' name=ID  (nameAlias=STRING)? ('['('description' description=STRING)? ']')?;
StereotypeTypeExtendedRef: type= [StereotypeTypeExtended | QualifiedName];
StereotypeTypeOriginal: type = ('System' | 'Actor' | 'ActiveTask' | 'ActiveEvent' |'UseCase' | 'DataEntity' | 'DataEntityCluster' |'Other');

IncludeSystemElementType: type = ('UseCase' |'Actor' | 'DataEntity' | 'DataEntityCluster' | 'DataEnumeration' |'ActiveEvent' | 'ActiveTask' | 'ActiveFlow');

/********************************************************************************
*   Packages Rule(s)
*********************************************************************************/
PackageAbstract: PackageSystem;

PackageSystem:
'Package' name=QualifiedName
 (imports+=Import)*

 ( (system=System) ) ;
 
/********************************************************************************
*   System Rule(s)
*********************************************************************************/
System:
'System' name=ID  (nameAlias=STRING)? ':' type=SystemType (':' subType=SystemSubType)? ('['
 ((isReusable ?= 'isReusable') | (isFinal  ?= 'isFinal'))?  // "isFinal" by default
 (isTestSuite ?= 'isTestSuite' ('systemUnderTest' sut= [System]) )? 
 ('partOf' partOf=[System])?
 ('vendor' vendor=STRING)?
 ('version' version=STRING)?
 (tags+=Tag)*
 ('description' description=STRING)?
']')?

(systemConcepts+=SystemConcept*) 
;

RefSystems: refs+=[System] (',' refs+=[System])*;

SystemConcept:	SystemElement ;
			 
SystemElement:	StructureElement | BehaviorElement | OtherElement | IncludeElementGeneric | UIModelElement;
											   
StructureElement: ActiveStructureElement  |  PassiveStructureElement ;
																   
PassiveStructureElement: DataEnumeration | DataEntityGeneric | Data;
  
DataEntityGeneric:	DataEntity | DataEntityCluster;

ActiveStructureElement: ContextDimension;	

BehaviorElement: ActiveElement;	

OtherElement:	Stereotype | Context /* | ContextDimension */ | TypeExtended;
						  
IncludeElementGeneric: IncludeAll | IncludeElement;	

/*******************************************************************************
*   IFML-based  Rule(s): For defining UserInterfaces in a PIM approach
*   see https://www.ifml.org/
********************************************************************************/

UIModelElement:
FlowElement | UIParameter | UIParameterBinding | UIParameterBindingGroup | UIExpression;

FlowElement: 
UIElement | UIComponentPart | UIAction | UIPortDefinition | UIEvent;

UIElement:
UIContainer | UIComponent | UIComponentRef;

UIContainer: 
'UIContainer' name=ID  (nameAlias=STRING)?  ':' type=UIContainerType (':' subType=UIContainerSubType)? ('['
 (isLandmark ?= 'isLandmark')? 
 (isDefault ?= 'isDefault')? 
 (isXOR ?= 'isXOR')? 
 ('activationExpression' activationExpression = UIExpression)?
 
 ('navigationFlowTo' flowsTo = RefFlowTo)?
 
 (uiElements += UIElement)*

 (uiActions += UIAction)*
 (uiElementEvents += UIElementEvent)*
 (uiParameters += UIParameter)*
						  
 (tags += Tag)*
 ('description' description=STRING)?	
']')?;

RefFlowTo:
refFlowTo+=	[FlowElement] (parameterBindingGroup += UIParameterBindingGroup)?
		 (',' refFlowTo+=[FlowElement] (parameterBindingGroup += UIParameterBindingGroup)?)* ;	

UIComponentRef: 'component' ref= [UIComponent | QualifiedName];

UIComponent: 
'component' name=ID  (nameAlias=STRING)?  ':' type=UIComponentType (':' subType=UIComponentSubType)? ('['
 (isActive ?= 'isActive')?   
 
 (isScrollable ?= 'isScrollable')?   //only for List*
 (isSlider ?= 'isSlider')?   		//only for List*
 
 (title=STRING)?
 (message=STRING)?
 ('activationExpression' uiActivationExpression=UIExpression)?
   

 //if databinding
 ('dataBinding' dataEntity= [DataEntityGeneric | QualifiedName] ('['
  ('visualizationAttributes' displayAttributes= DataAttributeRefsList)?
  ('searchAttributes' searchAttributes= DataAttributeRefsList)?	 //new
  ('filterAttributes' filterAttributes= DataAttributeRefsList)?   //new
  ('sortAttributes' sortAttributes= DataAttributeRefsList)?
  ('conditionalExpression' filterExpression= UIExpression)?
  ('orderBy' orderBy = [DataAttribute | QualifiedName] ('DESC' | 'ASC')? )?
  ']'
  )?
 )?

 // RecursiveNestedDataBinding - only for List_Tree ViewComponent
 ('recursiveNestedDataBinding' rnDataEntity= [DataEntityGeneric | QualifiedName] ('['
  ('visualizationAttributes' drnDisplayAttributes= DataAttributeRefsList)?
  ('sortAttributes' rnSortAttributes= DataAttributeRefsList)?
  ('conditionalExpression' rnFilterExpression= UIExpression)?
  ('orderBy' rnOrderBy = [DataAttribute | QualifiedName] ('DESC' | 'ASC')? )?
  )?
 )?

 ('dataFlowTo' dataFlowTos += [UIComponent] (dataParameterBindingGroups += UIParameterBindingGroup)?)*

 (uiComponentParts += UIComponentPart)*
 (uiElementEvents += UIElementEvent)*
 (uiParameters += UIParameter)*
				  
 (tags += Tag)*
 ('description' description=STRING)?	
']')?;	

UIComponentPart:
'part' name=ID  (nameAlias=STRING)?  ':' type=UIComponentPartType (':' subType=UIComponentPartSubType (':' wireframeType=UIWireframeType)? )? ('['
 (valueType=DataAttributeType)?
 (isReadOnly ?= 'isReadOnly')? 
 (isHidden ?= 'isHidden')? 
 ('defaultValue' defaultValue = STRING)? 
 ('activationExpression' uiActivationExpression=UIExpression)?
 ('showIf' showIf = Expression)?
 ('blockIf' blockIf = Expression)?
  
 //if databinding - only for Compound Fields
 ('dataBinding' dataEntity= [DataEntityGeneric | QualifiedName] ('['
  ('visualizationAttributes' displayAttributes= DataAttributeRefsList)?
  ('searchAttributes' searchAttributes= DataAttributeRefsList)?	 //new
  ('filterAttributes' filterAttributes= DataAttributeRefsList)?   //new
  ('sortAttributes' sortAttributes= DataAttributeRefsList)?
  ('conditionalExpression' filterExpression= UIExpression)?
  ('orderBy' orderBy = [DataAttribute | QualifiedName] ('DESC' | 'ASC')? )?
  ']'
  )?
 )?

 // DataAttributeBinding - only for Simple Fields
 ('dataAttributeBinding' dataAttributeBinding= [DataAttribute | QualifiedName] )?

 (uiComponentParts+=UIComponentPart)* 
 (uiElementEvents+=UIElementEvent)*
				  
 (tags+=Tag)*
 ('description' description=STRING)?	
']')?;	

UIAction: 'action' name=ID  (nameAlias=STRING)?  ':' type=UIActionType ('['
 (uiActionEvents+=UIActionEvent)*
 (uiParameters+=UIParameter)*
				  
 (tags+=Tag)*
 ('description' description=STRING)?	
']')?;	

UIPortDefinition: 'uiPortDefinition' name=ID  (nameAlias=STRING)?  ':' type=UIPortDefinitionType ('['
 (uiParameters+=UIParameter)*
				  
 (tags+=Tag)*
 ('description' description=STRING)?	
']')?;	

UIEvent: UIThrowingEvent | UICatchingEvent;

UIThrowingEvent: 'throwingEvent' name=ID  (nameAlias=STRING)?  ':' type=UIThrowingEventType  ('['
 (uiParameters+=UIParameter)*
 ('interactionFlowExpression' uiInteractionFlowExpression=UIExpression)?
 ('activationExpression' uiActivationExpression=UIExpression)?

 ('navigationFlowTo' flowsTo = RefFlowTo)?
				  
 (tags+=Tag)*
 ('description' description=STRING)?	
']')?;	

UICatchingEvent: UISystemEvent | UIActionEvent | UIElementEvent;

UISystemEvent: 'event' name=ID  (nameAlias=STRING)?  ':' type=UISystemEventType  ('['
 (uiParameters+=UIParameter)*
 ('interactionFlowExpression' interactionFlowExpression=UIExpression)?
 ('activationExpression' activationExpression=UIExpression)?
 ('triggeringExpressions' triggeringExpressions += UIExpression+)?
				  
 ('navigationFlowTo' flowsTo = RefFlowTo)?
				  
 (tags+=Tag)*
 ('description' description=STRING)?	
']')?;	

UIActionEvent: 'event' name=ID  (nameAlias=STRING)?  ':' type=UIActionEventType  ('['
 (uiParameters+=UIParameter)*
 ('interactionFlowExpression' interactionFlowExpression=UIExpression)?
 ('activationExpression' activationExpression=UIExpression)?
				  
 ('navigationFlowTo' flowsTo = RefFlowTo)?
				  
 (tags+=Tag)*
 ('description' description=STRING)?	
']')?;		

UIElementEvent: 'event' name=ID  (nameAlias=STRING)?  ':' type=UIElementEventType  (':' subType=UIElementEventSubType)? ('['
 (uiParameters+=UIParameter)*
 ('interactionFlowExpression' interactionFlowExpression+=UIExpression)?
 ('activationExpression' activationExpression+=UIExpression)?
				  
 ('navigationFlowTo' flowsTo = RefFlowTo)?

				  
 (tags+=Tag)*
 ('description' description=STRING)?	
']')?;	

UIParameterBindingGroup: 'withParameters' (uiParameterBindings += UIParameterBinding) (',' uiParameterBindings += UIParameterBinding)* ;
UIParameterBinding: '(' source= UIParameter '->' target= UIParameter ')';
UIParameter: name=ID  (nameAlias=STRING)? ;

UISimpleExpression: expression=STRING   ('['
 ('language' language=STRING)  // e.g., Java, OCL, VBA
 ('body' body=STRING)
']')?;

UIContextExpression: 'validContext' validContext= [Context];	

UIExpression: UISimpleExpression | UIContextExpression;

ActiveElement:
UseCase | ActiveEvent | ActiveTask | ActiveFlow ;

RefActiveElement:
refActiveElement+=[ActiveElement | QualifiedName] (',' refActiveElement+=[ActiveElement | QualifiedName] )+ ;

ActiveEvent:
'Event' name=ID  (nameAlias=STRING)? ':' type=ActiveEventType ('['
 (isInitial ?= 'isInitial')? 
 (isFinal ?= 'isFinal')? 
 (tags+=Tag)*
 ('description' description=STRING)?  ']')?;

ActiveTask:
'Task' name=ID  (nameAlias=STRING)? ':' type=ActiveTaskType ('['
 ('partOf' ('optional' | 'mandatory')? partOf=[ActiveTask | QualifiedName] )?  // ('optional' | 'mandatory') => (OR | AND); by default is OR 
 (tags+=Tag)*
 ('description' description=STRING)?
']')?;

ActiveFlow:
'TaskFlow' name=ID  (nameAlias=STRING)?   ':' type=ActiveFlowType ('['
 ('condition' condition=STRING)?   // only if type SequenceConditional
 'activeElements' activeElements=RefActiveElement
 (tags+=Tag)*
 ('description' description=STRING)?  ']')?;

/*******************************************************************************
*   Data-related  Rule(s): For defining DataEntities in a PIM approach
********************************************************************************/

DataEntity:  
'DataEntity' name=ID  (nameAlias=STRING)? ':' type=DataEntityType (':' subType=DataEntitySubType)? ('['
 ('isA' super=[DataEntity | QualifiedName] )?
 (attributes+=DataAttribute)*
 (constraint= DataEntityConstraint)?

 (tags+=Tag)*
 ('description' description=STRING)? ']')?;

DataAttribute:
'attribute' name=ID  (nameAlias=STRING)?  ':' type=DataAttributeType  ('['
 ('defaultValue' defaultValue=STRING)? 
 ('values' values=STRING)? 
 ('formula' formula=Formula)?
 ('visualization' visualizatione=STRING)? 
 ('helpMessage' helpMessage=STRING)? 
 (constraint= DataAttributeConstraint)?
 (tags+=Tag)*
 ('description' description=STRING)? ']')?;

DataAttributeRefsList :
(attributeRef += [DataAttribute | QualifiedName]) (',' attributeRef += [DataAttribute | QualifiedName])* ;

DataEntityConstraint: {DataEntityConstraint}
'constraints' '('
 (isReadOnly='ReadOnly')?   // is false by default
 (isEncrypted='Encrypted')?   // is false by default
 ('showAs' '(' showAsAttribute= [DataAttribute | QualifiedName] ')')?  //new
 (checks+=Check)*
')';

DataAttributeConstraint: {DataAttributeConstraint}
'constraints' '('
 ('multiplicity' multiplicity=Multiplicity)? 

 (isPrimaryKey='PrimaryKey')? 			// is false by default
 (isNotNull='NotNull')? 					// is false by default
 (isUnique='Unique')?   					// is false by default
 ('Derived' '(' derivedFrom=Expression ')')?   		
 (isReadOnly='ReadOnly')?   				// is false by default
 (isNotVisible='NotVisible')? 			// is false by default
 (isEncrypted='Encrypted')?   			// is false by default
 (foreignKey=ForeignKey)? 	
 (manyToMany=ManyToMany)? 	
 (checks+=Check)*
')';

DataEnumeration: 
'DataEnumeration' name=ID  (nameAlias=STRING)? 
 'values' '(' values+= DataEnumerationElement (',' values+=DataEnumerationElement)* ')' ('['
 (tags+=Tag)*
 ('description' description=STRING)? ']')?;

DataEnumerationRef: type= [DataEnumeration | QualifiedName];

DataEnumerationElement: name=ID (nameAlias=STRING)?;

Data:
'Data' name=ID  (nameAlias=STRING)?
  ':' type=[DataEntity | QualifiedName]  ('['
  ('withValues' table= DataAttributeValues)?
  (tags+=Tag)*
  ('description' description=STRING)? ']')?;

DataAttributeValues:
  (tableHeader = DataAttributeRefs)
  tableRows += DataAttributeTableRow*;

DataAttributeRefs :
  ('|' attributeRef += [DataAttribute | QualifiedName])+ "+|";

DataAttributeTableRow:
  ('|' attributeValues += AttributeValue)+ "+|";

ForeignKey:
'ForeignKey' '(' targetEntity=[DataEntity | QualifiedName]  
 ('toField' toField= [DataAttribute | QualifiedName])? 
 ('showAsField' showAsField= [DataAttribute | QualifiedName] )?
 ('defaultValue' defaultValue=STRING)? 
 ('onDelete' onDelete= ForeignKeyOnDeleteType )?
')' ;

ManyToMany:
'ManyToMany' '(' targetEntity=[DataEntity | QualifiedName] 
 ('throughEntity' throughEntity=[DataEntity | QualifiedName] )? 
 ('throughSourceField' throughSourceField=[DataAttribute | QualifiedName] )? 
 ('throughTargetField' throughTargetField=[DataAttribute | QualifiedName] )?
')' ;		

Check:
'Check' '(' name=ID  checkExpression=STRING ')';

DataEntityCluster:  
'DataEntityCluster' name=ID  (nameAlias=STRING)?  ':' type=DataEntityClusterType ('['
('main' main= [DataEntity | QualifiedName])
(children += ChildDataEntity)*
('uses' uses= RefDataEntity)?
(tags+=Tag)*
('description' description=STRING)? ']' )?;

ChildDataEntity:
'child' child = [DataEntity | QualifiedName]  ('[' 'uses' childUses =RefDataEntity ']')?;

RefDataEntity:
refDataEntity+=[DataEntity | QualifiedName]  (',' refDataEntity+=[DataEntity | QualifiedName] )* ;

Context:
'Context' name=ID  (nameAlias=STRING)? ('['
 ('actor' actors += [ContextDimensionActor | QualifiedName])?
 ('device' devices += [ContextDimensionDevice | QualifiedName])?
 ('sensor' sensors += [ContextDimensionSensor | QualifiedName])?
 (tags+=Tag)*
 ('description' description=STRING)? ']')?;
 
ContextElement: ContextDimension | ContextVariable;	

ContextDimension: ContextDimensionActor | ContextDimensionDevice | ContextDimensionSensor;

ContextDimensionActor:
'Actor' name=ID  (nameAlias=STRING)?  ':' type=ActorType ('['
 ('isA' super=[ContextDimensionActor | QualifiedName] )?
 (tags+=Tag)*
 ('description' description=STRING)? ']')?;

ContextDimensionDevice:
'ContexDevice' name=ID  (nameAlias=STRING)?  ':' type=ContextDimensionDeviceType ('['
																		 (
 ('cpuRam' cpuRam=INT 'Kb')												&
 ('cpuProcessor' cpuProcessor=INT 'KHz')								&
 ('battery' battery=INT '%')											&
 ('screenDiagonalSize' diagonalSize=INT 'pt')							&
 ('screenSizeCategory' sizeCategory= ScreenSizeCategoryType) 			&
 ('screenPixelSize' pixelSizeX= INT 'x' pixelSizeY= INT 'px' ) 			&
 ('screenDensity' screenDensity= INT 'dpi') 							&
 ('networkConnectivity' networkConnectivity= NetworkConnectivityType) 	)
																		 
 (tags+=Tag)*
 ('description' description=STRING)? ']')?;

ContextDimensionSensor:
'ContexSensor' name=ID  (nameAlias=STRING)?  ':' type=ContextDimensionSensorType ('['
 ('status' sensorStatus=SensorStatusType)?	
 (tags+=Tag)*
 ('description' description=STRING)? ']')?;

ContextVariable:
'ContextVariable' name=ID  (nameAlias=STRING)?  ('['
 (tags+=Tag)*
 ('description' description=STRING)? ']')?;

/********************************************************************************
*   UseCase-related Rule(s)
*********************************************************************************/

UseCase:
'UseCase' name=ID  (nameAlias=STRING)?  ':' type=UseCaseType ('['
 ((isNegative ?= 'isNegative') | (isPositive ?= 'isPositive'))?  // if not defined "isPositive" by default
 ((isConcrete ?= 'isConcrete') | (isAbstract ?= 'isAbstract'))?  // if not defined "isAbstract" by default
 ((isSolution ?= 'isSolution') | (isProblem ?= 'isProblem'))?  // if not defined "isProblem" by default
 
 ('actorInitiates' actorInitiates=[ContextDimensionActor | QualifiedName] )
 ('actorParticipates' actorParticipates+=RefActor)?
 ('dataEntity' dataEntity=[DataEntityGeneric | QualifiedName] )?

 ('precondition' precondition=STRING)?
 ('postcondition' postcondition=STRING)?
 
 (actions= UCActions)?
 (extensionPoints= UCExtensionPoints)? 
		 
 (includes= UCIncludes)?
 (extends+= UCExtends)*

 (tags+=Tag)*
 ('description' description=STRING)?
 
']')?;

RefActor:
refs+=[ContextDimensionActor | QualifiedName] (',' refs+=[ContextDimensionActor | QualifiedName] )*;

UCActions: 
'actions' actions+= ActionType  (',' actions+=ActionType)*;

UCIncludes:
'includes' includes+=RefUC;	

UCExtends:
'extends' usecase=[UseCase | QualifiedName]  'onExtensionPoint' extensionPoint=[UCExtensionPoint | QualifiedName];	

UCExtensionPoints:
'extensionPoints' extensionPoints+= UCExtensionPoint (',' extensionPoints+=UCExtensionPoint)*;

UCExtensionPoint: 
name=ID ('[' description=STRING ']' )?; 

RefUC:
refs+=[UseCase | QualifiedName] (',' refs+=[UseCase | QualifiedName] )*;

/********************************************************************************
*	  Formulas and Expressions
*********************************************************************************/

Formula: ArithmeticFormula | DetailsFormula;

ArithmeticFormula: 'arithmetic' '(' expr=Expression ')';

DetailsFormula: DetailsCountFormula | DetailsSumFormula;

DetailsCountFormula returns DetailsFormula:
	'details' ':' type='count' '(' dataEntity=[DataEntityGeneric | QualifiedName] ')';

DetailsSumFormula returns DetailsFormula: 
	'details' ':' type='sum' '(' attr=[DataAttribute | QualifiedName] ')';

enum DetailsFormulaOp:
    COUNT='count' | SUM='sum';

Expression returns Expression:
  BooleanExpression;

BooleanExpression returns Expression:
  Comparison
  (({BooleanExpression.left=current} op=("||"|"&&"|"and"|"or")) right=Comparison)*;

Comparison returns Expression:
  Membership
  (({Comparison.left=current} op=("<" | ">" | "<=" | ">=")) right=Membership)*;

Membership returns Expression:
  Equals
  (({Membership.left=current} op=("in" | "not_in")) "[" right+=Expression(',' right+=Expression)* "]")*;

Equals returns Expression:
  Addition
  (({Equals.left=current} op=("==" | "!=" | "=~" | "!~" | "is")) right=Addition)*;

Addition returns Expression:
  Multiplication
  (=>({Plus.left=current} '+' | {Minus.left=current} '-')
  right=Multiplication)*;

Multiplication returns Expression:
  Prefixed 
  (({MultiOrDivOrMod.left=current} op=("*"|"/"|"%")) right=Prefixed)*;

Prefixed returns Expression:
  {BooleanNegation} "!" expression=Atomic | /* right associativity */
  {ArithmeticSigned} '-' expression=Atomic | /* right associativity */
  Atomic;

Atomic returns Expression :
  LiteralExpression |	
  TernaryExpression |
  ParenthesizedExpression |
  {FunctionReference} ref=_Function |
  {VariableReference} ref=Variable
;

LiteralExpression:
  {IntegerLiteral} value=INT |
  {StringLiteral} value=STRING |
  {NullLiteral} value= 'null' |
  {BooleanLiteral} value=('true'|'false')
;

TernaryExpression:
  'if' expression=BooleanExpression
  'then' truevalue=Atomic
  (=>'else' falsevalue=Atomic)?
;

ParenthesizedExpression returns Expression:
	'(' Expression ')'
;

_Function: function=QualifiedName '(' (params+=Expression (',' params+=Expression)*)? ')';

Variable: value=[DataAttribute | QualifiedName];
